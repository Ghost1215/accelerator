;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit SimplyCombineAddrDataSPad : 
  module SPadAddrModule : 
    input clock : Clock
    input reset : Reset
    output io : {commonIO : {columnNum : UInt<4>, readOutData : UInt<4>, flip readEn : UInt<1>, writeIdx : UInt<4>, dataLenFinIO : {flip writeInDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<4>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}}, addrIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}, dataIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    reg dataLenReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h09"))) @[SPadModule.scala 196:33]
    wire dataWire : UInt<4> @[SPadModule.scala 197:28]
    dataLenReg <= io.commonIO.dataLenFinIO.streamLen @[SPadModule.scala 198:14]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 199:39]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 200:38]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 202:33]
    wire readWrapWire : UInt<1> @[SPadModule.scala 203:32]
    wire readIndexInc : UInt<1> @[SPadModule.scala 204:32]
    node _T = sub(dataLenReg, UInt<1>("h01")) @[SPadModule.scala 205:53]
    node _T_1 = tail(_T, 1) @[SPadModule.scala 205:53]
    node _T_2 = eq(padWriteIndexReg, _T_1) @[SPadModule.scala 205:37]
    writeWrapWire <= _T_2 @[SPadModule.scala 205:17]
    node _T_3 = sub(dataLenReg, UInt<1>("h01")) @[SPadModule.scala 206:51]
    node _T_4 = tail(_T_3, 1) @[SPadModule.scala 206:51]
    node _T_5 = eq(padReadIndexReg, _T_4) @[SPadModule.scala 206:35]
    readWrapWire <= _T_5 @[SPadModule.scala 206:16]
    when io.commonIO.dataLenFinIO.writeInDataIO.valid : @[SPadModule.scala 208:32]
      io.commonIO.dataLenFinIO.writeInDataIO.ready <= UInt<1>("h01") @[SPadModule.scala 209:27]
      node _T_6 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 210:42]
      node _T_7 = tail(_T_6, 1) @[SPadModule.scala 210:42]
      padWriteIndexReg <= _T_7 @[SPadModule.scala 210:22]
      when writeWrapWire : @[SPadModule.scala 211:26]
        padWriteIndexReg <= UInt<1>("h00") @[SPadModule.scala 212:24]
        skip @[SPadModule.scala 211:26]
      skip @[SPadModule.scala 208:32]
    else : @[SPadModule.scala 214:15]
      io.commonIO.dataLenFinIO.writeInDataIO.ready <= UInt<1>("h00") @[SPadModule.scala 215:27]
      skip @[SPadModule.scala 214:15]
    io.commonIO.writeIdx <= padWriteIndexReg @[SPadModule.scala 218:24]
    node _T_8 = and(io.commonIO.dataLenFinIO.writeInDataIO.valid, writeWrapWire) @[SPadModule.scala 219:62]
    io.commonIO.dataLenFinIO.writeFin <= _T_8 @[SPadModule.scala 219:37]
    io.commonIO.columnNum <= padReadIndexReg @[SPadModule.scala 220:25]
    wire _T_9 : UInt<4>[9] @[SPadModule.scala 131:44]
    _T_9[0] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[1] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[2] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[3] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[4] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[5] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[6] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[7] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[8] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    reg addrSPad : UInt<4>[9], clock with : (reset => (reset, _T_9)) @[SPadModule.scala 131:36]
    when io.commonIO.dataLenFinIO.writeInDataIO.valid : @[SPadModule.scala 133:32]
      addrSPad[padWriteIndexReg] <= io.commonIO.dataLenFinIO.writeInDataIO.bits.data @[SPadModule.scala 134:32]
      skip @[SPadModule.scala 133:32]
    when readIndexInc : @[SPadModule.scala 137:23]
      node _T_10 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 138:40]
      node _T_11 = tail(_T_10, 1) @[SPadModule.scala 138:40]
      padReadIndexReg <= _T_11 @[SPadModule.scala 138:21]
      when readWrapWire : @[SPadModule.scala 139:25]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 140:23]
        skip @[SPadModule.scala 139:25]
      skip @[SPadModule.scala 137:23]
    dataWire <= addrSPad[padReadIndexReg] @[SPadModule.scala 144:12]
    io.commonIO.readOutData <= dataWire @[SPadModule.scala 145:27]
    readIndexInc <= io.addrIO.indexInc @[SPadModule.scala 146:16]
    
  module SPadDataModule : 
    input clock : Clock
    input reset : Reset
    output io : {commonIO : {columnNum : UInt<4>, readOutData : UInt<12>, flip readEn : UInt<1>, writeIdx : UInt<4>, dataLenFinIO : {flip writeInDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<12>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}}, addrIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}, dataIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    reg dataLenReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h09"))) @[SPadModule.scala 196:33]
    wire dataWire : UInt<12> @[SPadModule.scala 197:28]
    dataLenReg <= io.commonIO.dataLenFinIO.streamLen @[SPadModule.scala 198:14]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 199:39]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 200:38]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 202:33]
    wire readWrapWire : UInt<1> @[SPadModule.scala 203:32]
    wire readIndexInc : UInt<1> @[SPadModule.scala 204:32]
    node _T = sub(dataLenReg, UInt<1>("h01")) @[SPadModule.scala 205:53]
    node _T_1 = tail(_T, 1) @[SPadModule.scala 205:53]
    node _T_2 = eq(padWriteIndexReg, _T_1) @[SPadModule.scala 205:37]
    writeWrapWire <= _T_2 @[SPadModule.scala 205:17]
    node _T_3 = sub(dataLenReg, UInt<1>("h01")) @[SPadModule.scala 206:51]
    node _T_4 = tail(_T_3, 1) @[SPadModule.scala 206:51]
    node _T_5 = eq(padReadIndexReg, _T_4) @[SPadModule.scala 206:35]
    readWrapWire <= _T_5 @[SPadModule.scala 206:16]
    when io.commonIO.dataLenFinIO.writeInDataIO.valid : @[SPadModule.scala 208:32]
      io.commonIO.dataLenFinIO.writeInDataIO.ready <= UInt<1>("h01") @[SPadModule.scala 209:27]
      node _T_6 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 210:42]
      node _T_7 = tail(_T_6, 1) @[SPadModule.scala 210:42]
      padWriteIndexReg <= _T_7 @[SPadModule.scala 210:22]
      when writeWrapWire : @[SPadModule.scala 211:26]
        padWriteIndexReg <= UInt<1>("h00") @[SPadModule.scala 212:24]
        skip @[SPadModule.scala 211:26]
      skip @[SPadModule.scala 208:32]
    else : @[SPadModule.scala 214:15]
      io.commonIO.dataLenFinIO.writeInDataIO.ready <= UInt<1>("h00") @[SPadModule.scala 215:27]
      skip @[SPadModule.scala 214:15]
    io.commonIO.writeIdx <= padWriteIndexReg @[SPadModule.scala 218:24]
    node _T_8 = and(io.commonIO.dataLenFinIO.writeInDataIO.valid, writeWrapWire) @[SPadModule.scala 219:62]
    io.commonIO.dataLenFinIO.writeFin <= _T_8 @[SPadModule.scala 219:37]
    io.commonIO.columnNum <= padReadIndexReg @[SPadModule.scala 220:25]
    wire _T_9 : UInt<12>[16] @[SPadModule.scala 171:46]
    _T_9[0] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[1] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[2] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[3] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[4] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[5] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[6] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[7] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[8] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[9] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[10] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[11] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[12] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[13] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[14] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    _T_9[15] <= UInt<12>("h00") @[SPadModule.scala 171:46]
    reg _T_10 : UInt<12>[16], clock with : (reset => (reset, _T_9)) @[SPadModule.scala 171:38]
    when io.commonIO.dataLenFinIO.writeInDataIO.valid : @[SPadModule.scala 172:34]
      _T_10[padWriteIndexReg] <= io.commonIO.dataLenFinIO.writeInDataIO.bits.data @[SPadModule.scala 173:34]
      skip @[SPadModule.scala 172:34]
    when readIndexInc : @[SPadModule.scala 176:25]
      node _T_11 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 177:42]
      node _T_12 = tail(_T_11, 1) @[SPadModule.scala 177:42]
      padReadIndexReg <= _T_12 @[SPadModule.scala 177:23]
      when readWrapWire : @[SPadModule.scala 178:27]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 179:25]
        skip @[SPadModule.scala 178:27]
      skip @[SPadModule.scala 176:25]
    dataWire <= _T_10[padReadIndexReg] @[SPadModule.scala 183:14]
    readIndexInc <= io.dataIO.indexInc @[SPadModule.scala 185:16]
    io.commonIO.readOutData <= dataWire @[SPadModule.scala 186:27]
    
  module SimplyCombineAddrDataSPad : 
    input clock : Clock
    input reset : UInt<1>
    output io : {iactIOs : {dataIOs : {flip writeInDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<12>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}, addrIOs : {flip writeInDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<4>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}}, iactAddrWriteIdx : UInt<4>, flip iactDataReq : UInt<1>, iactMatrixColumn : UInt<4>, iactMatrixRow : UInt<4>, iactMatrixData : UInt<8>, iactMatrixDataBin : UInt<12>, iactAddrReadEn : UInt<1>, iactAddrReadData : UInt<4>, iactDataReadIndex : UInt<4>, iactDataWriteIdx : UInt<4>}
    
    inst iactAddrSPad of SPadAddrModule @[SPadModule.scala 22:44]
    iactAddrSPad.clock <= clock
    iactAddrSPad.reset <= reset
    inst iactDataSPad of SPadDataModule @[SPadModule.scala 23:44]
    iactDataSPad.clock <= clock
    iactDataSPad.reset <= reset
    reg sPad : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[SPadModule.scala 26:27]
    wire iactAddrIndexWire : UInt<4> @[SPadModule.scala 27:37]
    wire iactAddrDataWire : UInt<4> @[SPadModule.scala 28:36]
    wire iactDataIndexWire : UInt<4> @[SPadModule.scala 29:37]
    reg iactSPadZeroColumnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SPadModule.scala 30:44]
    reg iactAddrSPadReadEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SPadModule.scala 31:44]
    reg iactDataSPadReadEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SPadModule.scala 32:44]
    wire iactAddrSPadIdxIncWire : UInt<1> @[SPadModule.scala 33:42]
    wire iactDataSPadIdxIncWire : UInt<1> @[SPadModule.scala 34:42]
    reg iactMatrixColumnReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 35:42]
    reg iactZeroColumnNumber : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 36:43]
    reg iactDataSPadFirstReadReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[SPadModule.scala 37:47]
    iactAddrSPad.io.addrIO.indexInc <= iactAddrSPadIdxIncWire @[SPadModule.scala 38:35]
    iactDataSPad.io.dataIO.indexInc <= iactDataSPadIdxIncWire @[SPadModule.scala 39:35]
    node _T = eq(sPad, UInt<2>("h02")) @[SPadModule.scala 40:36]
    node _T_1 = add(iactDataIndexWire, UInt<1>("h01")) @[SPadModule.scala 40:97]
    node _T_2 = tail(_T_1, 1) @[SPadModule.scala 40:97]
    node _T_3 = eq(iactAddrDataWire, _T_2) @[SPadModule.scala 40:74]
    node _T_4 = and(_T, _T_3) @[SPadModule.scala 40:53]
    node _T_5 = eq(sPad, UInt<2>("h01")) @[SPadModule.scala 40:116]
    node _T_6 = eq(iactAddrDataWire, UInt<4>("h0f")) @[SPadModule.scala 40:154]
    node _T_7 = and(_T_5, _T_6) @[SPadModule.scala 40:133]
    node _T_8 = or(_T_4, _T_7) @[SPadModule.scala 40:106]
    iactAddrSPadIdxIncWire <= _T_8 @[SPadModule.scala 40:26]
    node _T_9 = eq(sPad, UInt<2>("h01")) @[SPadModule.scala 41:36]
    node _T_10 = eq(iactSPadZeroColumnReg, UInt<1>("h00")) @[SPadModule.scala 41:56]
    node _T_11 = and(_T_9, _T_10) @[SPadModule.scala 41:53]
    node _T_12 = eq(iactDataSPadFirstReadReg, UInt<1>("h00")) @[SPadModule.scala 41:82]
    node _T_13 = and(_T_11, _T_12) @[SPadModule.scala 41:79]
    node _T_14 = eq(sPad, UInt<2>("h02")) @[SPadModule.scala 41:119]
    node _T_15 = eq(iactAddrSPadIdxIncWire, UInt<1>("h00")) @[SPadModule.scala 41:139]
    node _T_16 = and(_T_14, _T_15) @[SPadModule.scala 41:136]
    node _T_17 = or(_T_13, _T_16) @[SPadModule.scala 41:109]
    iactDataSPadIdxIncWire <= _T_17 @[SPadModule.scala 41:26]
    io.iactIOs.addrIOs.writeFin <= iactAddrSPad.io.commonIO.dataLenFinIO.writeFin @[SPadModule.scala 42:41]
    iactAddrSPad.io.commonIO.dataLenFinIO.streamLen <= io.iactIOs.addrIOs.streamLen @[SPadModule.scala 42:41]
    iactAddrSPad.io.commonIO.dataLenFinIO.writeInDataIO.bits.data <= io.iactIOs.addrIOs.writeInDataIO.bits.data @[SPadModule.scala 42:41]
    iactAddrSPad.io.commonIO.dataLenFinIO.writeInDataIO.valid <= io.iactIOs.addrIOs.writeInDataIO.valid @[SPadModule.scala 42:41]
    io.iactIOs.addrIOs.writeInDataIO.ready <= iactAddrSPad.io.commonIO.dataLenFinIO.writeInDataIO.ready @[SPadModule.scala 42:41]
    io.iactIOs.dataIOs.writeFin <= iactDataSPad.io.commonIO.dataLenFinIO.writeFin @[SPadModule.scala 43:41]
    iactDataSPad.io.commonIO.dataLenFinIO.streamLen <= io.iactIOs.dataIOs.streamLen @[SPadModule.scala 43:41]
    iactDataSPad.io.commonIO.dataLenFinIO.writeInDataIO.bits.data <= io.iactIOs.dataIOs.writeInDataIO.bits.data @[SPadModule.scala 43:41]
    iactDataSPad.io.commonIO.dataLenFinIO.writeInDataIO.valid <= io.iactIOs.dataIOs.writeInDataIO.valid @[SPadModule.scala 43:41]
    io.iactIOs.dataIOs.writeInDataIO.ready <= iactDataSPad.io.commonIO.dataLenFinIO.writeInDataIO.ready @[SPadModule.scala 43:41]
    io.iactAddrWriteIdx <= iactAddrSPad.io.commonIO.writeIdx @[SPadModule.scala 44:23]
    io.iactDataWriteIdx <= iactDataSPad.io.commonIO.writeIdx @[SPadModule.scala 45:23]
    iactAddrIndexWire <= iactAddrSPad.io.commonIO.columnNum @[SPadModule.scala 47:21]
    io.iactMatrixColumn <= iactMatrixColumnReg @[SPadModule.scala 48:23]
    iactAddrDataWire <= iactAddrSPad.io.commonIO.readOutData @[SPadModule.scala 49:20]
    io.iactAddrReadData <= iactAddrDataWire @[SPadModule.scala 50:23]
    iactAddrSPad.io.commonIO.readEn <= iactAddrSPadReadEnReg @[SPadModule.scala 51:35]
    io.iactAddrReadEn <= iactAddrSPadReadEnReg @[SPadModule.scala 52:21]
    iactAddrSPad.io.dataIO.readInIdxEn is invalid @[SPadModule.scala 53:26]
    iactAddrSPad.io.dataIO.indexInc is invalid @[SPadModule.scala 53:26]
    iactAddrSPad.io.dataIO.readInIdx is invalid @[SPadModule.scala 53:26]
    iactAddrSPad.io.addrIO.readInIdx is invalid @[SPadModule.scala 54:36]
    iactAddrSPad.io.addrIO.readInIdxEn is invalid @[SPadModule.scala 55:38]
    iactDataIndexWire <= iactDataSPad.io.commonIO.columnNum @[SPadModule.scala 57:21]
    io.iactDataReadIndex <= iactDataIndexWire @[SPadModule.scala 58:24]
    io.iactMatrixDataBin <= iactDataSPad.io.commonIO.readOutData @[SPadModule.scala 59:24]
    node iactDataCountVec_0 = bits(iactDataSPad.io.commonIO.readOutData, 0, 0) @[SPadModule.scala 60:74]
    node iactDataCountVec_1 = bits(iactDataSPad.io.commonIO.readOutData, 1, 1) @[SPadModule.scala 60:74]
    node iactDataCountVec_2 = bits(iactDataSPad.io.commonIO.readOutData, 2, 2) @[SPadModule.scala 60:74]
    node iactDataCountVec_3 = bits(iactDataSPad.io.commonIO.readOutData, 3, 3) @[SPadModule.scala 60:74]
    node iactDataCountVec_4 = bits(iactDataSPad.io.commonIO.readOutData, 4, 4) @[SPadModule.scala 60:74]
    node iactDataCountVec_5 = bits(iactDataSPad.io.commonIO.readOutData, 5, 5) @[SPadModule.scala 60:74]
    node iactDataCountVec_6 = bits(iactDataSPad.io.commonIO.readOutData, 6, 6) @[SPadModule.scala 60:74]
    node iactDataCountVec_7 = bits(iactDataSPad.io.commonIO.readOutData, 7, 7) @[SPadModule.scala 60:74]
    node iactDataCountVec_8 = bits(iactDataSPad.io.commonIO.readOutData, 8, 8) @[SPadModule.scala 60:74]
    node iactDataCountVec_9 = bits(iactDataSPad.io.commonIO.readOutData, 9, 9) @[SPadModule.scala 60:74]
    node iactDataCountVec_10 = bits(iactDataSPad.io.commonIO.readOutData, 10, 10) @[SPadModule.scala 60:74]
    node iactDataCountVec_11 = bits(iactDataSPad.io.commonIO.readOutData, 11, 11) @[SPadModule.scala 60:74]
    node _T_18 = cat(iactDataCountVec_5, iactDataCountVec_4) @[Cat.scala 29:58]
    node _T_19 = cat(iactDataCountVec_7, iactDataCountVec_6) @[Cat.scala 29:58]
    node _T_20 = cat(_T_19, _T_18) @[Cat.scala 29:58]
    node _T_21 = cat(iactDataCountVec_9, iactDataCountVec_8) @[Cat.scala 29:58]
    node _T_22 = cat(iactDataCountVec_11, iactDataCountVec_10) @[Cat.scala 29:58]
    node _T_23 = cat(_T_22, _T_21) @[Cat.scala 29:58]
    node _T_24 = cat(_T_23, _T_20) @[Cat.scala 29:58]
    io.iactMatrixData <= _T_24 @[SPadModule.scala 61:21]
    node _T_25 = cat(iactDataCountVec_1, iactDataCountVec_0) @[Cat.scala 29:58]
    node _T_26 = cat(iactDataCountVec_3, iactDataCountVec_2) @[Cat.scala 29:58]
    node _T_27 = cat(_T_26, _T_25) @[Cat.scala 29:58]
    io.iactMatrixRow <= _T_27 @[SPadModule.scala 62:20]
    iactDataSPad.io.commonIO.readEn <= iactDataSPadReadEnReg @[SPadModule.scala 63:35]
    iactDataSPad.io.dataIO.readInIdx is invalid @[SPadModule.scala 65:36]
    iactDataSPad.io.dataIO.readInIdxEn is invalid @[SPadModule.scala 66:38]
    iactDataSPad.io.addrIO.readInIdxEn is invalid @[SPadModule.scala 67:26]
    iactDataSPad.io.addrIO.indexInc is invalid @[SPadModule.scala 67:26]
    iactDataSPad.io.addrIO.readInIdx is invalid @[SPadModule.scala 67:26]
    node _T_28 = eq(UInt<2>("h00"), sPad) @[Conditional.scala 37:30]
    when _T_28 : @[Conditional.scala 40:58]
      when io.iactDataReq : @[SPadModule.scala 73:28]
        sPad <= UInt<2>("h01") @[SPadModule.scala 74:14]
        iactAddrSPadReadEnReg <= UInt<1>("h01") @[SPadModule.scala 75:31]
        iactDataSPadReadEnReg <= UInt<1>("h00") @[SPadModule.scala 76:31]
        iactDataSPadFirstReadReg <= UInt<1>("h01") @[SPadModule.scala 77:34]
        skip @[SPadModule.scala 73:28]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_29 = eq(UInt<2>("h01"), sPad) @[Conditional.scala 37:30]
      when _T_29 : @[Conditional.scala 39:67]
        node _T_30 = eq(iactAddrDataWire, UInt<4>("h0f")) @[SPadModule.scala 82:30]
        when _T_30 : @[SPadModule.scala 82:56]
          sPad <= UInt<2>("h01") @[SPadModule.scala 83:14]
          iactSPadZeroColumnReg <= UInt<1>("h01") @[SPadModule.scala 84:31]
          iactAddrSPadReadEnReg <= UInt<1>("h01") @[SPadModule.scala 85:31]
          iactDataSPadReadEnReg <= UInt<1>("h00") @[SPadModule.scala 86:31]
          node _T_31 = add(iactZeroColumnNumber, UInt<1>("h01")) @[SPadModule.scala 87:54]
          node _T_32 = tail(_T_31, 1) @[SPadModule.scala 87:54]
          iactZeroColumnNumber <= _T_32 @[SPadModule.scala 87:30]
          skip @[SPadModule.scala 82:56]
        else : @[SPadModule.scala 88:19]
          sPad <= UInt<2>("h02") @[SPadModule.scala 89:14]
          iactAddrSPadReadEnReg <= UInt<1>("h00") @[SPadModule.scala 90:31]
          iactDataSPadReadEnReg <= UInt<1>("h01") @[SPadModule.scala 91:31]
          skip @[SPadModule.scala 88:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_33 = eq(UInt<2>("h02"), sPad) @[Conditional.scala 37:30]
        when _T_33 : @[Conditional.scala 39:67]
          iactDataSPadFirstReadReg <= UInt<1>("h00") @[SPadModule.scala 95:32]
          node _T_34 = sub(io.iactIOs.dataIOs.streamLen, UInt<1>("h01")) @[SPadModule.scala 96:64]
          node _T_35 = tail(_T_34, 1) @[SPadModule.scala 96:64]
          node _T_36 = eq(iactDataIndexWire, _T_35) @[SPadModule.scala 96:31]
          when _T_36 : @[SPadModule.scala 96:71]
            sPad <= UInt<2>("h00") @[SPadModule.scala 97:14]
            iactDataSPadReadEnReg <= UInt<1>("h00") @[SPadModule.scala 98:31]
            iactSPadZeroColumnReg <= UInt<1>("h00") @[SPadModule.scala 99:31]
            skip @[SPadModule.scala 96:71]
          when iactAddrSPadIdxIncWire : @[SPadModule.scala 101:37]
            sPad <= UInt<2>("h01") @[SPadModule.scala 102:14]
            iactSPadZeroColumnReg <= UInt<1>("h00") @[SPadModule.scala 103:31]
            iactAddrSPadReadEnReg <= UInt<1>("h01") @[SPadModule.scala 105:31]
            iactDataSPadReadEnReg <= UInt<1>("h00") @[SPadModule.scala 106:31]
            when iactSPadZeroColumnReg : @[SPadModule.scala 107:38]
              node _T_37 = add(iactMatrixColumnReg, UInt<1>("h01")) @[SPadModule.scala 108:54]
              node _T_38 = tail(_T_37, 1) @[SPadModule.scala 108:54]
              node _T_39 = add(_T_38, iactZeroColumnNumber) @[SPadModule.scala 108:60]
              node _T_40 = tail(_T_39, 1) @[SPadModule.scala 108:60]
              iactMatrixColumnReg <= _T_40 @[SPadModule.scala 108:31]
              iactZeroColumnNumber <= UInt<1>("h00") @[SPadModule.scala 110:32]
              skip @[SPadModule.scala 107:38]
            else : @[SPadModule.scala 111:22]
              node _T_41 = add(iactMatrixColumnReg, UInt<1>("h01")) @[SPadModule.scala 112:54]
              node _T_42 = tail(_T_41, 1) @[SPadModule.scala 112:54]
              iactMatrixColumnReg <= _T_42 @[SPadModule.scala 112:31]
              skip @[SPadModule.scala 111:22]
            skip @[SPadModule.scala 101:37]
          else : @[SPadModule.scala 114:20]
            sPad <= UInt<2>("h02") @[SPadModule.scala 115:14]
            iactAddrSPadReadEnReg <= UInt<1>("h00") @[SPadModule.scala 116:31]
            iactDataSPadReadEnReg <= UInt<1>("h01") @[SPadModule.scala 117:31]
            skip @[SPadModule.scala 114:20]
          skip @[Conditional.scala 39:67]
    
