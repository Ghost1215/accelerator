;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit SPadDataModule : 
  module SPadDataModule : 
    input clock : Clock
    input reset : UInt<1>
    output io : {commonIO : {columnNum : UInt<4>, readOutData : UInt<12>, flip readEn : UInt<1>, flip writeEn : UInt<1>, writeIdx : UInt<4>, dataLenFinIO : {flip writeInDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<12>}}, writeFin : UInt<1>}}, addrIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}, dataIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    wire dataWire : UInt<12> @[SPadModule.scala 79:28]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 80:39]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 81:38]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 83:33]
    wire readWrapWire : UInt<1> @[SPadModule.scala 84:32]
    wire readIndexInc : UInt<1> @[SPadModule.scala 85:32]
    node _T = eq(io.commonIO.dataLenFinIO.writeInDataIO.bits.data, UInt<1>("h00")) @[SPadModule.scala 86:46]
    node _T_1 = and(_T, io.commonIO.writeEn) @[SPadModule.scala 86:54]
    writeWrapWire <= _T_1 @[SPadModule.scala 86:17]
    node _T_2 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 87:28]
    node _T_3 = and(_T_2, readIndexInc) @[SPadModule.scala 87:36]
    readWrapWire <= _T_3 @[SPadModule.scala 87:16]
    node _T_4 = and(io.commonIO.dataLenFinIO.writeInDataIO.valid, io.commonIO.writeEn) @[SPadModule.scala 89:31]
    when _T_4 : @[SPadModule.scala 89:55]
      io.commonIO.dataLenFinIO.writeInDataIO.ready <= UInt<1>("h01") @[SPadModule.scala 90:27]
      node _T_5 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 91:42]
      node _T_6 = tail(_T_5, 1) @[SPadModule.scala 91:42]
      padWriteIndexReg <= _T_6 @[SPadModule.scala 91:22]
      when writeWrapWire : @[SPadModule.scala 92:26]
        padWriteIndexReg <= UInt<1>("h00") @[SPadModule.scala 93:24]
        skip @[SPadModule.scala 92:26]
      skip @[SPadModule.scala 89:55]
    else : @[SPadModule.scala 95:15]
      io.commonIO.dataLenFinIO.writeInDataIO.ready <= UInt<1>("h00") @[SPadModule.scala 96:27]
      skip @[SPadModule.scala 95:15]
    io.commonIO.writeIdx <= padWriteIndexReg @[SPadModule.scala 99:24]
    io.commonIO.dataLenFinIO.writeFin <= writeWrapWire @[SPadModule.scala 100:37]
    io.commonIO.columnNum <= padReadIndexReg @[SPadModule.scala 101:25]
    wire _T_7 : UInt<12>[16] @[SPadModule.scala 54:46]
    _T_7[0] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[1] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[2] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[3] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[4] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[5] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[6] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[7] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[8] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[9] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[10] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[11] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[12] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[13] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[14] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[15] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    reg _T_8 : UInt<12>[16], clock with : (reset => (reset, _T_7)) @[SPadModule.scala 54:38]
    node _T_9 = and(io.commonIO.dataLenFinIO.writeInDataIO.valid, io.commonIO.writeEn) @[SPadModule.scala 55:33]
    when _T_9 : @[SPadModule.scala 55:57]
      _T_8[padWriteIndexReg] <= io.commonIO.dataLenFinIO.writeInDataIO.bits.data @[SPadModule.scala 56:34]
      skip @[SPadModule.scala 55:57]
    when readIndexInc : @[SPadModule.scala 59:25]
      node _T_10 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 60:42]
      node _T_11 = tail(_T_10, 1) @[SPadModule.scala 60:42]
      padReadIndexReg <= _T_11 @[SPadModule.scala 60:23]
      when readWrapWire : @[SPadModule.scala 61:27]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 62:25]
        skip @[SPadModule.scala 61:27]
      skip @[SPadModule.scala 59:25]
    dataWire <= _T_8[padReadIndexReg] @[SPadModule.scala 66:14]
    readIndexInc <= io.dataIO.indexInc @[SPadModule.scala 68:16]
    io.commonIO.readOutData <= dataWire @[SPadModule.scala 69:27]
    
