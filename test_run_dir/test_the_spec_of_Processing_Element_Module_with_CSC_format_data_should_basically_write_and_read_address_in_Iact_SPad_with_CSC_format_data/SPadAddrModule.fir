;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit SPadAddrModule : 
  module SPadAddrModule : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dataPath : {columnNum : UInt<4>, readOutData : UInt<4>, flip writeInData : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}}}, ctrlPath : {flip writeEn : UInt<1>, writeIdx : UInt<4>, writeFin : UInt<1>, flip readEn : UInt<1>, flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    wire dataWire : UInt<4> @[SPadModule.scala 78:28]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 79:39]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 80:38]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 81:33]
    wire readWrapWire : UInt<1> @[SPadModule.scala 82:32]
    wire readIndexInc : UInt<1> @[SPadModule.scala 83:32]
    node _T = eq(io.dataPath.writeInData.data.bits, UInt<1>("h00")) @[SPadModule.scala 84:41]
    node _T_1 = and(_T, io.ctrlPath.writeEn) @[SPadModule.scala 84:49]
    writeWrapWire <= _T_1 @[SPadModule.scala 84:17]
    node _T_2 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 85:28]
    node _T_3 = and(_T_2, readIndexInc) @[SPadModule.scala 85:36]
    readWrapWire <= _T_3 @[SPadModule.scala 85:16]
    node _T_4 = and(io.dataPath.writeInData.data.valid, io.ctrlPath.writeEn) @[SPadModule.scala 87:31]
    when _T_4 : @[SPadModule.scala 87:55]
      io.dataPath.writeInData.data.ready <= UInt<1>("h01") @[SPadModule.scala 88:27]
      node _T_5 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 89:42]
      node _T_6 = tail(_T_5, 1) @[SPadModule.scala 89:42]
      padWriteIndexReg <= _T_6 @[SPadModule.scala 89:22]
      when writeWrapWire : @[SPadModule.scala 90:26]
        padWriteIndexReg <= UInt<1>("h00") @[SPadModule.scala 91:24]
        skip @[SPadModule.scala 90:26]
      skip @[SPadModule.scala 87:55]
    else : @[SPadModule.scala 93:15]
      io.dataPath.writeInData.data.ready <= UInt<1>("h00") @[SPadModule.scala 94:27]
      skip @[SPadModule.scala 93:15]
    io.ctrlPath.writeIdx <= padWriteIndexReg @[SPadModule.scala 97:24]
    io.ctrlPath.writeFin <= writeWrapWire @[SPadModule.scala 98:24]
    io.dataPath.columnNum <= padReadIndexReg @[SPadModule.scala 99:25]
    wire _T_7 : UInt<4>[9] @[SPadModule.scala 14:44]
    _T_7[0] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    _T_7[1] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    _T_7[2] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    _T_7[3] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    _T_7[4] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    _T_7[5] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    _T_7[6] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    _T_7[7] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    _T_7[8] <= UInt<4>("h00") @[SPadModule.scala 14:44]
    reg addrSPad : UInt<4>[9], clock with : (reset => (reset, _T_7)) @[SPadModule.scala 14:36]
    node _T_8 = and(io.dataPath.writeInData.data.valid, io.ctrlPath.writeEn) @[SPadModule.scala 16:31]
    when _T_8 : @[SPadModule.scala 16:55]
      addrSPad[padWriteIndexReg] <= io.dataPath.writeInData.data.bits @[SPadModule.scala 17:32]
      skip @[SPadModule.scala 16:55]
    when readIndexInc : @[SPadModule.scala 20:23]
      node _T_9 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 21:40]
      node _T_10 = tail(_T_9, 1) @[SPadModule.scala 21:40]
      padReadIndexReg <= _T_10 @[SPadModule.scala 21:21]
      when readWrapWire : @[SPadModule.scala 22:25]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 23:23]
        skip @[SPadModule.scala 22:25]
      skip @[SPadModule.scala 20:23]
    dataWire <= addrSPad[padReadIndexReg] @[SPadModule.scala 27:12]
    io.dataPath.readOutData <= dataWire @[SPadModule.scala 28:27]
    readIndexInc <= io.ctrlPath.indexInc @[SPadModule.scala 29:16]
    
