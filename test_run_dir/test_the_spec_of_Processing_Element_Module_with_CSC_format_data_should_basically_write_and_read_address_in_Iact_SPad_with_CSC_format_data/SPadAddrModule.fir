;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit SPadAddrModule : 
  module SPadAddrModule : 
    input clock : Clock
    input reset : UInt<1>
    output io : {commonIO : {columnNum : UInt<4>, readOutData : UInt<4>, flip readEn : UInt<1>, writeIdx : UInt<4>, dataLenFinIO : {flip writeInDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<4>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}}, addrIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}, dataIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    reg dataLenReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h09"))) @[SPadModule.scala 196:33]
    wire dataWire : UInt<4> @[SPadModule.scala 197:28]
    dataLenReg <= io.commonIO.dataLenFinIO.streamLen @[SPadModule.scala 198:14]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 199:39]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 200:38]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 202:33]
    wire readWrapWire : UInt<1> @[SPadModule.scala 203:32]
    wire readIndexInc : UInt<1> @[SPadModule.scala 204:32]
    node _T = sub(dataLenReg, UInt<1>("h01")) @[SPadModule.scala 205:53]
    node _T_1 = tail(_T, 1) @[SPadModule.scala 205:53]
    node _T_2 = eq(padWriteIndexReg, _T_1) @[SPadModule.scala 205:37]
    writeWrapWire <= _T_2 @[SPadModule.scala 205:17]
    node _T_3 = sub(dataLenReg, UInt<1>("h01")) @[SPadModule.scala 206:51]
    node _T_4 = tail(_T_3, 1) @[SPadModule.scala 206:51]
    node _T_5 = eq(padReadIndexReg, _T_4) @[SPadModule.scala 206:35]
    readWrapWire <= _T_5 @[SPadModule.scala 206:16]
    when io.commonIO.dataLenFinIO.writeInDataIO.valid : @[SPadModule.scala 208:32]
      io.commonIO.dataLenFinIO.writeInDataIO.ready <= UInt<1>("h01") @[SPadModule.scala 209:27]
      node _T_6 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 210:42]
      node _T_7 = tail(_T_6, 1) @[SPadModule.scala 210:42]
      padWriteIndexReg <= _T_7 @[SPadModule.scala 210:22]
      when writeWrapWire : @[SPadModule.scala 211:26]
        padWriteIndexReg <= UInt<1>("h00") @[SPadModule.scala 212:24]
        skip @[SPadModule.scala 211:26]
      skip @[SPadModule.scala 208:32]
    else : @[SPadModule.scala 214:15]
      io.commonIO.dataLenFinIO.writeInDataIO.ready <= UInt<1>("h00") @[SPadModule.scala 215:27]
      skip @[SPadModule.scala 214:15]
    io.commonIO.writeIdx <= padWriteIndexReg @[SPadModule.scala 218:24]
    node _T_8 = and(io.commonIO.dataLenFinIO.writeInDataIO.valid, writeWrapWire) @[SPadModule.scala 219:62]
    io.commonIO.dataLenFinIO.writeFin <= _T_8 @[SPadModule.scala 219:37]
    io.commonIO.columnNum <= padReadIndexReg @[SPadModule.scala 220:25]
    wire _T_9 : UInt<4>[9] @[SPadModule.scala 131:44]
    _T_9[0] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[1] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[2] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[3] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[4] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[5] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[6] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[7] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    _T_9[8] <= UInt<4>("h00") @[SPadModule.scala 131:44]
    reg addrSPad : UInt<4>[9], clock with : (reset => (reset, _T_9)) @[SPadModule.scala 131:36]
    when io.commonIO.dataLenFinIO.writeInDataIO.valid : @[SPadModule.scala 133:32]
      addrSPad[padWriteIndexReg] <= io.commonIO.dataLenFinIO.writeInDataIO.bits.data @[SPadModule.scala 134:32]
      skip @[SPadModule.scala 133:32]
    when readIndexInc : @[SPadModule.scala 137:23]
      node _T_10 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 138:40]
      node _T_11 = tail(_T_10, 1) @[SPadModule.scala 138:40]
      padReadIndexReg <= _T_11 @[SPadModule.scala 138:21]
      when readWrapWire : @[SPadModule.scala 139:25]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 140:23]
        skip @[SPadModule.scala 139:25]
      skip @[SPadModule.scala 137:23]
    dataWire <= addrSPad[padReadIndexReg] @[SPadModule.scala 144:12]
    io.commonIO.readOutData <= dataWire @[SPadModule.scala 145:27]
    readIndexInc <= io.addrIO.indexInc @[SPadModule.scala 146:16]
    
