;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit SPadAdrModule : 
  module SPadAdrModule : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dataPath : {columnNum : UInt<4>, readOutData : UInt<4>, flip writeInData : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}}}, ctrlPath : {flip writeEn : UInt<1>, writeIdx : UInt<4>, writeFin : UInt<1>, flip readEn : UInt<1>, flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    wire dataWire : UInt<4> @[SPadModule.scala 75:38]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 76:49]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 77:48]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 78:43]
    wire readWrapWire : UInt<1> @[SPadModule.scala 79:42]
    wire readIndexInc : UInt<1> @[SPadModule.scala 80:42]
    node _T = eq(io.dataPath.writeInData.data.bits, UInt<1>("h00")) @[SPadModule.scala 81:41]
    node _T_1 = and(_T, io.ctrlPath.writeEn) @[SPadModule.scala 81:49]
    writeWrapWire <= _T_1 @[SPadModule.scala 81:17]
    node _T_2 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 82:28]
    node _T_3 = and(_T_2, readIndexInc) @[SPadModule.scala 82:36]
    readWrapWire <= _T_3 @[SPadModule.scala 82:16]
    node _T_4 = and(io.dataPath.writeInData.data.valid, io.ctrlPath.writeEn) @[SPadModule.scala 84:31]
    when _T_4 : @[SPadModule.scala 84:55]
      io.dataPath.writeInData.data.ready <= UInt<1>("h01") @[SPadModule.scala 85:27]
      node _T_5 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 86:42]
      node _T_6 = tail(_T_5, 1) @[SPadModule.scala 86:42]
      padWriteIndexReg <= _T_6 @[SPadModule.scala 86:22]
      when writeWrapWire : @[SPadModule.scala 87:26]
        padWriteIndexReg <= UInt<1>("h00") @[SPadModule.scala 88:24]
        skip @[SPadModule.scala 87:26]
      skip @[SPadModule.scala 84:55]
    else : @[SPadModule.scala 90:15]
      io.dataPath.writeInData.data.ready <= UInt<1>("h00") @[SPadModule.scala 91:27]
      skip @[SPadModule.scala 90:15]
    io.ctrlPath.writeIdx <= padWriteIndexReg @[SPadModule.scala 94:24]
    io.ctrlPath.writeFin <= writeWrapWire @[SPadModule.scala 95:24]
    io.dataPath.columnNum <= padReadIndexReg @[SPadModule.scala 96:25]
    wire _T_7 : UInt<4>[9] @[SPadModule.scala 14:51]
    _T_7[0] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    _T_7[1] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    _T_7[2] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    _T_7[3] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    _T_7[4] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    _T_7[5] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    _T_7[6] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    _T_7[7] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    _T_7[8] <= UInt<4>("h00") @[SPadModule.scala 14:51]
    reg _T_8 : UInt<4>[9], clock with : (reset => (reset, _T_7)) @[SPadModule.scala 14:43]
    node _T_9 = and(io.dataPath.writeInData.data.valid, io.ctrlPath.writeEn) @[SPadModule.scala 16:31]
    when _T_9 : @[SPadModule.scala 16:55]
      _T_8[padWriteIndexReg] <= io.dataPath.writeInData.data.bits @[SPadModule.scala 17:31]
      skip @[SPadModule.scala 16:55]
    when readIndexInc : @[SPadModule.scala 20:23]
      node _T_10 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 21:40]
      node _T_11 = tail(_T_10, 1) @[SPadModule.scala 21:40]
      padReadIndexReg <= _T_11 @[SPadModule.scala 21:21]
      when readWrapWire : @[SPadModule.scala 22:25]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 23:23]
        skip @[SPadModule.scala 22:25]
      skip @[SPadModule.scala 20:23]
    dataWire <= _T_8[padReadIndexReg] @[SPadModule.scala 27:12]
    io.dataPath.readOutData <= dataWire @[SPadModule.scala 28:27]
    readIndexInc <= io.ctrlPath.indexInc @[SPadModule.scala 29:16]
    
