;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit SimplyCombineAddrDataSPad : 
  module SPadAddrModule : 
    input clock : Clock
    input reset : Reset
    output io : {commonIO : {columnNum : UInt<4>, readOutData : UInt<4>, flip readEn : UInt<1>, writeIdx : UInt<4>, dataLenFinIO : {flip streamDecoupledDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<4>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}}, addrIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>}, dataIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>}}
    
    reg dataLenReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h09"))) @[ProcessingElement.scala 236:33]
    wire dataWire : UInt<4> @[ProcessingElement.scala 237:28]
    dataLenReg <= io.commonIO.dataLenFinIO.streamLen @[ProcessingElement.scala 238:14]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[ProcessingElement.scala 239:39]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[ProcessingElement.scala 241:38]
    wire writeWrapWire : UInt<1> @[ProcessingElement.scala 244:33]
    wire readWrapWire : UInt<1> @[ProcessingElement.scala 245:32]
    wire readIndexInc : UInt<1> @[ProcessingElement.scala 246:32]
    node _T = sub(dataLenReg, UInt<1>("h01")) @[ProcessingElement.scala 247:53]
    node _T_1 = tail(_T, 1) @[ProcessingElement.scala 247:53]
    node _T_2 = eq(padWriteIndexReg, _T_1) @[ProcessingElement.scala 247:37]
    writeWrapWire <= _T_2 @[ProcessingElement.scala 247:17]
    node _T_3 = sub(dataLenReg, UInt<1>("h01")) @[ProcessingElement.scala 248:51]
    node _T_4 = tail(_T_3, 1) @[ProcessingElement.scala 248:51]
    node _T_5 = eq(padReadIndexReg, _T_4) @[ProcessingElement.scala 248:35]
    readWrapWire <= _T_5 @[ProcessingElement.scala 248:16]
    when io.commonIO.dataLenFinIO.streamDecoupledDataIO.valid : @[ProcessingElement.scala 250:32]
      io.commonIO.dataLenFinIO.streamDecoupledDataIO.ready <= UInt<1>("h01") @[ProcessingElement.scala 251:27]
      node _T_6 = add(padWriteIndexReg, UInt<1>("h01")) @[ProcessingElement.scala 252:42]
      node _T_7 = tail(_T_6, 1) @[ProcessingElement.scala 252:42]
      padWriteIndexReg <= _T_7 @[ProcessingElement.scala 252:22]
      when writeWrapWire : @[ProcessingElement.scala 253:26]
        padWriteIndexReg <= UInt<1>("h00") @[ProcessingElement.scala 254:24]
        skip @[ProcessingElement.scala 253:26]
      skip @[ProcessingElement.scala 250:32]
    else : @[ProcessingElement.scala 256:15]
      io.commonIO.dataLenFinIO.streamDecoupledDataIO.ready <= UInt<1>("h00") @[ProcessingElement.scala 257:27]
      skip @[ProcessingElement.scala 256:15]
    when readIndexInc : @[ProcessingElement.scala 260:23]
      node _T_8 = add(padReadIndexReg, UInt<1>("h01")) @[ProcessingElement.scala 261:40]
      node _T_9 = tail(_T_8, 1) @[ProcessingElement.scala 261:40]
      padReadIndexReg <= _T_9 @[ProcessingElement.scala 261:21]
      when readWrapWire : @[ProcessingElement.scala 262:25]
        padReadIndexReg <= UInt<1>("h00") @[ProcessingElement.scala 263:23]
        skip @[ProcessingElement.scala 262:25]
      skip @[ProcessingElement.scala 260:23]
    io.commonIO.writeIdx <= padWriteIndexReg @[ProcessingElement.scala 267:24]
    node _T_10 = and(io.commonIO.dataLenFinIO.streamDecoupledDataIO.valid, writeWrapWire) @[ProcessingElement.scala 268:62]
    io.commonIO.dataLenFinIO.writeFin <= _T_10 @[ProcessingElement.scala 268:37]
    io.commonIO.columnNum <= padReadIndexReg @[ProcessingElement.scala 269:25]
    wire _T_11 : UInt<4>[15] @[ProcessingElement.scala 196:44]
    _T_11[0] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[1] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[2] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[3] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[4] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[5] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[6] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[7] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[8] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[9] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[10] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[11] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[12] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[13] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    _T_11[14] <= UInt<4>("h00") @[ProcessingElement.scala 196:44]
    reg addrSPad : UInt<4>[15], clock with : (reset => (reset, _T_11)) @[ProcessingElement.scala 196:36]
    when io.commonIO.dataLenFinIO.streamDecoupledDataIO.valid : @[ProcessingElement.scala 198:32]
      addrSPad[padWriteIndexReg] <= io.commonIO.dataLenFinIO.streamDecoupledDataIO.bits.data @[ProcessingElement.scala 199:32]
      skip @[ProcessingElement.scala 198:32]
    dataWire <= addrSPad[padReadIndexReg] @[ProcessingElement.scala 202:12]
    io.commonIO.readOutData <= dataWire @[ProcessingElement.scala 203:27]
    readIndexInc <= io.addrIO.indexInc @[ProcessingElement.scala 204:16]
    
  module SPadDataModule : 
    input clock : Clock
    input reset : Reset
    output io : {commonIO : {columnNum : UInt<4>, readOutData : UInt<12>, flip readEn : UInt<1>, writeIdx : UInt<4>, dataLenFinIO : {flip streamDecoupledDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<12>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}}, addrIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>}, dataIO : {flip readInIdx : UInt<4>, flip indexInc : UInt<1>}}
    
    reg dataLenReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h09"))) @[ProcessingElement.scala 236:33]
    wire dataWire : UInt<12> @[ProcessingElement.scala 237:28]
    dataLenReg <= io.commonIO.dataLenFinIO.streamLen @[ProcessingElement.scala 238:14]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[ProcessingElement.scala 239:39]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[ProcessingElement.scala 241:38]
    wire writeWrapWire : UInt<1> @[ProcessingElement.scala 244:33]
    wire readWrapWire : UInt<1> @[ProcessingElement.scala 245:32]
    wire readIndexInc : UInt<1> @[ProcessingElement.scala 246:32]
    node _T = sub(dataLenReg, UInt<1>("h01")) @[ProcessingElement.scala 247:53]
    node _T_1 = tail(_T, 1) @[ProcessingElement.scala 247:53]
    node _T_2 = eq(padWriteIndexReg, _T_1) @[ProcessingElement.scala 247:37]
    writeWrapWire <= _T_2 @[ProcessingElement.scala 247:17]
    node _T_3 = sub(dataLenReg, UInt<1>("h01")) @[ProcessingElement.scala 248:51]
    node _T_4 = tail(_T_3, 1) @[ProcessingElement.scala 248:51]
    node _T_5 = eq(padReadIndexReg, _T_4) @[ProcessingElement.scala 248:35]
    readWrapWire <= _T_5 @[ProcessingElement.scala 248:16]
    when io.commonIO.dataLenFinIO.streamDecoupledDataIO.valid : @[ProcessingElement.scala 250:32]
      io.commonIO.dataLenFinIO.streamDecoupledDataIO.ready <= UInt<1>("h01") @[ProcessingElement.scala 251:27]
      node _T_6 = add(padWriteIndexReg, UInt<1>("h01")) @[ProcessingElement.scala 252:42]
      node _T_7 = tail(_T_6, 1) @[ProcessingElement.scala 252:42]
      padWriteIndexReg <= _T_7 @[ProcessingElement.scala 252:22]
      when writeWrapWire : @[ProcessingElement.scala 253:26]
        padWriteIndexReg <= UInt<1>("h00") @[ProcessingElement.scala 254:24]
        skip @[ProcessingElement.scala 253:26]
      skip @[ProcessingElement.scala 250:32]
    else : @[ProcessingElement.scala 256:15]
      io.commonIO.dataLenFinIO.streamDecoupledDataIO.ready <= UInt<1>("h00") @[ProcessingElement.scala 257:27]
      skip @[ProcessingElement.scala 256:15]
    when readIndexInc : @[ProcessingElement.scala 260:23]
      node _T_8 = add(padReadIndexReg, UInt<1>("h01")) @[ProcessingElement.scala 261:40]
      node _T_9 = tail(_T_8, 1) @[ProcessingElement.scala 261:40]
      padReadIndexReg <= _T_9 @[ProcessingElement.scala 261:21]
      when readWrapWire : @[ProcessingElement.scala 262:25]
        padReadIndexReg <= UInt<1>("h00") @[ProcessingElement.scala 263:23]
        skip @[ProcessingElement.scala 262:25]
      skip @[ProcessingElement.scala 260:23]
    io.commonIO.writeIdx <= padWriteIndexReg @[ProcessingElement.scala 267:24]
    node _T_10 = and(io.commonIO.dataLenFinIO.streamDecoupledDataIO.valid, writeWrapWire) @[ProcessingElement.scala 268:62]
    io.commonIO.dataLenFinIO.writeFin <= _T_10 @[ProcessingElement.scala 268:37]
    io.commonIO.columnNum <= padReadIndexReg @[ProcessingElement.scala 269:25]
    wire _T_11 : UInt<12>[16] @[ProcessingElement.scala 218:46]
    _T_11[0] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[1] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[2] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[3] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[4] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[5] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[6] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[7] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[8] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[9] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[10] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[11] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[12] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[13] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[14] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    _T_11[15] <= UInt<12>("h00") @[ProcessingElement.scala 218:46]
    reg _T_12 : UInt<12>[16], clock with : (reset => (reset, _T_11)) @[ProcessingElement.scala 218:38]
    when io.commonIO.dataLenFinIO.streamDecoupledDataIO.valid : @[ProcessingElement.scala 219:34]
      _T_12[padWriteIndexReg] <= io.commonIO.dataLenFinIO.streamDecoupledDataIO.bits.data @[ProcessingElement.scala 220:34]
      skip @[ProcessingElement.scala 219:34]
    dataWire <= _T_12[padReadIndexReg] @[ProcessingElement.scala 223:14]
    readIndexInc <= io.dataIO.indexInc @[ProcessingElement.scala 225:16]
    io.commonIO.readOutData <= dataWire @[ProcessingElement.scala 226:27]
    
  module SimplyCombineAddrDataSPad : 
    input clock : Clock
    input reset : UInt<1>
    output io : {iactIOs : {dataIOs : {flip streamDecoupledDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<12>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}, addrIOs : {flip streamDecoupledDataIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<4>}}, flip streamLen : UInt<4>, writeFin : UInt<1>}}, iactAddrWriteIdx : UInt<4>, flip iactDataReq : UInt<1>, iactMatrixColumn : UInt<4>, iactMatrixRow : UInt<4>, iactMatrixData : UInt<8>, iactMatrixDataBin : UInt<12>, iactAddrReadEn : UInt<1>, iactAddrReadData : UInt<4>, iactDataReadIndex : UInt<4>, iactDataWriteIdx : UInt<4>}
    
    inst iactAddrSPad of SPadAddrModule @[CompressedSparseColumnSpecTest.scala 107:46]
    iactAddrSPad.clock <= clock
    iactAddrSPad.reset <= reset
    inst iactDataSPad of SPadDataModule @[CompressedSparseColumnSpecTest.scala 108:46]
    iactDataSPad.clock <= clock
    iactDataSPad.reset <= reset
    reg sPad : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CompressedSparseColumnSpecTest.scala 111:29]
    wire iactASPRERegEnable : UInt<1> @[CompressedSparseColumnSpecTest.scala 112:40]
    wire iactAddrIndexWire : UInt<4> @[CompressedSparseColumnSpecTest.scala 113:39]
    wire iactAddrDataWire : UInt<4> @[CompressedSparseColumnSpecTest.scala 114:38]
    wire iactDataIndexWire : UInt<4> @[CompressedSparseColumnSpecTest.scala 115:39]
    reg iactSPadZeroColumnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CompressedSparseColumnSpecTest.scala 116:46]
    reg iactAddrSPadReadEnReg : UInt<1>, clock @[Reg.scala 15:16]
    when iactASPRERegEnable : @[Reg.scala 16:19]
      iactAddrSPadReadEnReg <= UInt<1>("h00") @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg iactDataSPadReadEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CompressedSparseColumnSpecTest.scala 118:46]
    wire iactAddrSPadIdxIncWire : UInt<1> @[CompressedSparseColumnSpecTest.scala 119:44]
    wire iactDataSPadIdxIncWire : UInt<1> @[CompressedSparseColumnSpecTest.scala 120:44]
    reg iactMatrixColumnReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[CompressedSparseColumnSpecTest.scala 121:44]
    reg iactZeroColumnNumber : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[CompressedSparseColumnSpecTest.scala 122:45]
    reg iactDataSPadFirstRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[CompressedSparseColumnSpecTest.scala 123:46]
    iactAddrSPad.io.addrIO.indexInc <= iactAddrSPadIdxIncWire @[CompressedSparseColumnSpecTest.scala 124:37]
    iactDataSPad.io.dataIO.indexInc <= iactDataSPadIdxIncWire @[CompressedSparseColumnSpecTest.scala 125:37]
    node _T = eq(sPad, UInt<2>("h02")) @[CompressedSparseColumnSpecTest.scala 126:38]
    node _T_1 = add(iactDataIndexWire, UInt<1>("h01")) @[CompressedSparseColumnSpecTest.scala 126:99]
    node _T_2 = tail(_T_1, 1) @[CompressedSparseColumnSpecTest.scala 126:99]
    node _T_3 = eq(iactAddrDataWire, _T_2) @[CompressedSparseColumnSpecTest.scala 126:76]
    node _T_4 = and(_T, _T_3) @[CompressedSparseColumnSpecTest.scala 126:55]
    node _T_5 = eq(sPad, UInt<2>("h01")) @[CompressedSparseColumnSpecTest.scala 126:118]
    node _T_6 = eq(iactAddrDataWire, UInt<4>("h0f")) @[CompressedSparseColumnSpecTest.scala 126:156]
    node _T_7 = and(_T_5, _T_6) @[CompressedSparseColumnSpecTest.scala 126:135]
    node _T_8 = or(_T_4, _T_7) @[CompressedSparseColumnSpecTest.scala 126:108]
    iactAddrSPadIdxIncWire <= _T_8 @[CompressedSparseColumnSpecTest.scala 126:28]
    node _T_9 = eq(sPad, UInt<2>("h01")) @[CompressedSparseColumnSpecTest.scala 127:38]
    node _T_10 = eq(iactSPadZeroColumnReg, UInt<1>("h00")) @[CompressedSparseColumnSpecTest.scala 127:58]
    node _T_11 = and(_T_9, _T_10) @[CompressedSparseColumnSpecTest.scala 127:55]
    node _T_12 = eq(iactDataSPadFirstRead, UInt<1>("h00")) @[CompressedSparseColumnSpecTest.scala 127:84]
    node _T_13 = and(_T_11, _T_12) @[CompressedSparseColumnSpecTest.scala 127:81]
    node _T_14 = eq(sPad, UInt<2>("h02")) @[CompressedSparseColumnSpecTest.scala 127:118]
    node _T_15 = eq(iactAddrSPadIdxIncWire, UInt<1>("h00")) @[CompressedSparseColumnSpecTest.scala 127:138]
    node _T_16 = and(_T_14, _T_15) @[CompressedSparseColumnSpecTest.scala 127:135]
    node _T_17 = or(_T_13, _T_16) @[CompressedSparseColumnSpecTest.scala 127:108]
    iactDataSPadIdxIncWire <= _T_17 @[CompressedSparseColumnSpecTest.scala 127:28]
    node _T_18 = eq(sPad, UInt<2>("h00")) @[CompressedSparseColumnSpecTest.scala 128:33]
    node _T_19 = eq(sPad, UInt<2>("h01")) @[CompressedSparseColumnSpecTest.scala 128:56]
    node _T_20 = and(_T_19, iactSPadZeroColumnReg) @[CompressedSparseColumnSpecTest.scala 128:73]
    node _T_21 = or(_T_18, _T_20) @[CompressedSparseColumnSpecTest.scala 128:46]
    iactASPRERegEnable <= _T_21 @[CompressedSparseColumnSpecTest.scala 128:24]
    io.iactIOs.addrIOs.writeFin <= iactAddrSPad.io.commonIO.dataLenFinIO.writeFin @[CompressedSparseColumnSpecTest.scala 129:43]
    iactAddrSPad.io.commonIO.dataLenFinIO.streamLen <= io.iactIOs.addrIOs.streamLen @[CompressedSparseColumnSpecTest.scala 129:43]
    iactAddrSPad.io.commonIO.dataLenFinIO.streamDecoupledDataIO.bits.data <= io.iactIOs.addrIOs.streamDecoupledDataIO.bits.data @[CompressedSparseColumnSpecTest.scala 129:43]
    iactAddrSPad.io.commonIO.dataLenFinIO.streamDecoupledDataIO.valid <= io.iactIOs.addrIOs.streamDecoupledDataIO.valid @[CompressedSparseColumnSpecTest.scala 129:43]
    io.iactIOs.addrIOs.streamDecoupledDataIO.ready <= iactAddrSPad.io.commonIO.dataLenFinIO.streamDecoupledDataIO.ready @[CompressedSparseColumnSpecTest.scala 129:43]
    io.iactIOs.dataIOs.writeFin <= iactDataSPad.io.commonIO.dataLenFinIO.writeFin @[CompressedSparseColumnSpecTest.scala 130:43]
    iactDataSPad.io.commonIO.dataLenFinIO.streamLen <= io.iactIOs.dataIOs.streamLen @[CompressedSparseColumnSpecTest.scala 130:43]
    iactDataSPad.io.commonIO.dataLenFinIO.streamDecoupledDataIO.bits.data <= io.iactIOs.dataIOs.streamDecoupledDataIO.bits.data @[CompressedSparseColumnSpecTest.scala 130:43]
    iactDataSPad.io.commonIO.dataLenFinIO.streamDecoupledDataIO.valid <= io.iactIOs.dataIOs.streamDecoupledDataIO.valid @[CompressedSparseColumnSpecTest.scala 130:43]
    io.iactIOs.dataIOs.streamDecoupledDataIO.ready <= iactDataSPad.io.commonIO.dataLenFinIO.streamDecoupledDataIO.ready @[CompressedSparseColumnSpecTest.scala 130:43]
    io.iactAddrWriteIdx <= iactAddrSPad.io.commonIO.writeIdx @[CompressedSparseColumnSpecTest.scala 131:25]
    io.iactDataWriteIdx <= iactDataSPad.io.commonIO.writeIdx @[CompressedSparseColumnSpecTest.scala 132:25]
    iactAddrIndexWire <= iactAddrSPad.io.commonIO.columnNum @[CompressedSparseColumnSpecTest.scala 134:23]
    io.iactMatrixColumn <= iactMatrixColumnReg @[CompressedSparseColumnSpecTest.scala 135:25]
    iactAddrDataWire <= iactAddrSPad.io.commonIO.readOutData @[CompressedSparseColumnSpecTest.scala 136:22]
    io.iactAddrReadData <= iactAddrDataWire @[CompressedSparseColumnSpecTest.scala 137:25]
    iactAddrSPad.io.commonIO.readEn <= iactAddrSPadReadEnReg @[CompressedSparseColumnSpecTest.scala 138:37]
    io.iactAddrReadEn <= iactAddrSPadReadEnReg @[CompressedSparseColumnSpecTest.scala 139:23]
    iactAddrSPad.io.dataIO.indexInc is invalid @[CompressedSparseColumnSpecTest.scala 140:28]
    iactAddrSPad.io.dataIO.readInIdx is invalid @[CompressedSparseColumnSpecTest.scala 140:28]
    iactAddrSPad.io.addrIO.readInIdx is invalid @[CompressedSparseColumnSpecTest.scala 141:38]
    iactDataIndexWire <= iactDataSPad.io.commonIO.columnNum @[CompressedSparseColumnSpecTest.scala 143:23]
    io.iactDataReadIndex <= iactDataIndexWire @[CompressedSparseColumnSpecTest.scala 144:26]
    io.iactMatrixDataBin <= iactDataSPad.io.commonIO.readOutData @[CompressedSparseColumnSpecTest.scala 145:26]
    node iactDataCountVec_0 = bits(iactDataSPad.io.commonIO.readOutData, 0, 0) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_1 = bits(iactDataSPad.io.commonIO.readOutData, 1, 1) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_2 = bits(iactDataSPad.io.commonIO.readOutData, 2, 2) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_3 = bits(iactDataSPad.io.commonIO.readOutData, 3, 3) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_4 = bits(iactDataSPad.io.commonIO.readOutData, 4, 4) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_5 = bits(iactDataSPad.io.commonIO.readOutData, 5, 5) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_6 = bits(iactDataSPad.io.commonIO.readOutData, 6, 6) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_7 = bits(iactDataSPad.io.commonIO.readOutData, 7, 7) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_8 = bits(iactDataSPad.io.commonIO.readOutData, 8, 8) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_9 = bits(iactDataSPad.io.commonIO.readOutData, 9, 9) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_10 = bits(iactDataSPad.io.commonIO.readOutData, 10, 10) @[CompressedSparseColumnSpecTest.scala 146:76]
    node iactDataCountVec_11 = bits(iactDataSPad.io.commonIO.readOutData, 11, 11) @[CompressedSparseColumnSpecTest.scala 146:76]
    node _T_22 = cat(iactDataCountVec_5, iactDataCountVec_4) @[Cat.scala 29:58]
    node _T_23 = cat(iactDataCountVec_7, iactDataCountVec_6) @[Cat.scala 29:58]
    node _T_24 = cat(_T_23, _T_22) @[Cat.scala 29:58]
    node _T_25 = cat(iactDataCountVec_9, iactDataCountVec_8) @[Cat.scala 29:58]
    node _T_26 = cat(iactDataCountVec_11, iactDataCountVec_10) @[Cat.scala 29:58]
    node _T_27 = cat(_T_26, _T_25) @[Cat.scala 29:58]
    node _T_28 = cat(_T_27, _T_24) @[Cat.scala 29:58]
    io.iactMatrixData <= _T_28 @[CompressedSparseColumnSpecTest.scala 147:23]
    node _T_29 = cat(iactDataCountVec_1, iactDataCountVec_0) @[Cat.scala 29:58]
    node _T_30 = cat(iactDataCountVec_3, iactDataCountVec_2) @[Cat.scala 29:58]
    node _T_31 = cat(_T_30, _T_29) @[Cat.scala 29:58]
    io.iactMatrixRow <= _T_31 @[CompressedSparseColumnSpecTest.scala 148:22]
    iactDataSPad.io.commonIO.readEn <= io.iactDataReq @[CompressedSparseColumnSpecTest.scala 149:37]
    iactDataSPad.io.commonIO.readEn <= iactDataSPadReadEnReg @[CompressedSparseColumnSpecTest.scala 150:37]
    iactDataSPad.io.dataIO.readInIdx is invalid @[CompressedSparseColumnSpecTest.scala 152:38]
    iactDataSPad.io.addrIO.indexInc is invalid @[CompressedSparseColumnSpecTest.scala 153:28]
    iactDataSPad.io.addrIO.readInIdx is invalid @[CompressedSparseColumnSpecTest.scala 153:28]
    node _T_32 = eq(UInt<2>("h00"), sPad) @[Conditional.scala 37:30]
    when _T_32 : @[Conditional.scala 40:58]
      when io.iactDataReq : @[CompressedSparseColumnSpecTest.scala 159:30]
        sPad <= UInt<2>("h01") @[CompressedSparseColumnSpecTest.scala 160:16]
        iactAddrSPadReadEnReg <= UInt<1>("h01") @[CompressedSparseColumnSpecTest.scala 161:33]
        iactDataSPadReadEnReg <= UInt<1>("h00") @[CompressedSparseColumnSpecTest.scala 162:33]
        iactDataSPadFirstRead <= UInt<1>("h01") @[CompressedSparseColumnSpecTest.scala 163:33]
        skip @[CompressedSparseColumnSpecTest.scala 159:30]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_33 = eq(UInt<2>("h01"), sPad) @[Conditional.scala 37:30]
      when _T_33 : @[Conditional.scala 39:67]
        node _T_34 = eq(iactAddrDataWire, UInt<4>("h0f")) @[CompressedSparseColumnSpecTest.scala 168:32]
        when _T_34 : @[CompressedSparseColumnSpecTest.scala 168:54]
          sPad <= UInt<2>("h01") @[CompressedSparseColumnSpecTest.scala 169:16]
          iactSPadZeroColumnReg <= UInt<1>("h01") @[CompressedSparseColumnSpecTest.scala 170:33]
          iactAddrSPadReadEnReg <= UInt<1>("h01") @[CompressedSparseColumnSpecTest.scala 171:33]
          iactDataSPadReadEnReg <= UInt<1>("h00") @[CompressedSparseColumnSpecTest.scala 172:33]
          node _T_35 = add(iactZeroColumnNumber, UInt<1>("h01")) @[CompressedSparseColumnSpecTest.scala 173:56]
          node _T_36 = tail(_T_35, 1) @[CompressedSparseColumnSpecTest.scala 173:56]
          iactZeroColumnNumber <= _T_36 @[CompressedSparseColumnSpecTest.scala 173:32]
          skip @[CompressedSparseColumnSpecTest.scala 168:54]
        else : @[CompressedSparseColumnSpecTest.scala 174:21]
          sPad <= UInt<2>("h02") @[CompressedSparseColumnSpecTest.scala 175:16]
          iactAddrSPadReadEnReg <= UInt<1>("h00") @[CompressedSparseColumnSpecTest.scala 176:33]
          iactDataSPadReadEnReg <= UInt<1>("h01") @[CompressedSparseColumnSpecTest.scala 177:33]
          skip @[CompressedSparseColumnSpecTest.scala 174:21]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_37 = eq(UInt<2>("h02"), sPad) @[Conditional.scala 37:30]
        when _T_37 : @[Conditional.scala 39:67]
          iactDataSPadFirstRead <= UInt<1>("h00") @[CompressedSparseColumnSpecTest.scala 181:31]
          sPad <= UInt<2>("h00") @[CompressedSparseColumnSpecTest.scala 182:14]
          when iactAddrSPadIdxIncWire : @[CompressedSparseColumnSpecTest.scala 183:39]
            sPad <= UInt<2>("h01") @[CompressedSparseColumnSpecTest.scala 184:16]
            iactSPadZeroColumnReg <= UInt<1>("h00") @[CompressedSparseColumnSpecTest.scala 185:33]
            iactAddrSPadReadEnReg <= UInt<1>("h01") @[CompressedSparseColumnSpecTest.scala 187:33]
            iactDataSPadReadEnReg <= UInt<1>("h00") @[CompressedSparseColumnSpecTest.scala 188:33]
            when iactSPadZeroColumnReg : @[CompressedSparseColumnSpecTest.scala 189:40]
              node _T_38 = add(iactMatrixColumnReg, UInt<1>("h01")) @[CompressedSparseColumnSpecTest.scala 190:56]
              node _T_39 = tail(_T_38, 1) @[CompressedSparseColumnSpecTest.scala 190:56]
              node _T_40 = add(_T_39, iactZeroColumnNumber) @[CompressedSparseColumnSpecTest.scala 190:62]
              node _T_41 = tail(_T_40, 1) @[CompressedSparseColumnSpecTest.scala 190:62]
              iactMatrixColumnReg <= _T_41 @[CompressedSparseColumnSpecTest.scala 190:33]
              iactZeroColumnNumber <= UInt<1>("h00") @[CompressedSparseColumnSpecTest.scala 192:34]
              skip @[CompressedSparseColumnSpecTest.scala 189:40]
            else : @[CompressedSparseColumnSpecTest.scala 194:24]
              node _T_42 = add(iactMatrixColumnReg, UInt<1>("h01")) @[CompressedSparseColumnSpecTest.scala 195:56]
              node _T_43 = tail(_T_42, 1) @[CompressedSparseColumnSpecTest.scala 195:56]
              iactMatrixColumnReg <= _T_43 @[CompressedSparseColumnSpecTest.scala 195:33]
              skip @[CompressedSparseColumnSpecTest.scala 194:24]
            skip @[CompressedSparseColumnSpecTest.scala 183:39]
          else : @[CompressedSparseColumnSpecTest.scala 197:22]
            sPad <= UInt<2>("h02") @[CompressedSparseColumnSpecTest.scala 198:16]
            iactAddrSPadReadEnReg <= UInt<1>("h00") @[CompressedSparseColumnSpecTest.scala 199:33]
            iactDataSPadReadEnReg <= UInt<1>("h01") @[CompressedSparseColumnSpecTest.scala 200:33]
            skip @[CompressedSparseColumnSpecTest.scala 197:22]
          node _T_44 = eq(iactAddrDataWire, iactDataIndexWire) @[CompressedSparseColumnSpecTest.scala 202:51]
          iactAddrSPadReadEnReg <= _T_44 @[CompressedSparseColumnSpecTest.scala 202:31]
          skip @[Conditional.scala 39:67]
    
