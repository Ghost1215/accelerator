;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit InActSRAMCommon : 
  module InActSRAMCommon : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dataPath : {flip inIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}}, outIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}}}, ctrlPath : {flip writeOrRead : UInt<1>, flip doEn : UInt<1>, done : UInt<1>}, debugIO : {idx : UInt<9>, idxInc : UInt<1>, idxCount : UInt<9>, currentData : UInt<4>, meetOneZero : UInt<1>, theState : UInt<2>, waitForRead : UInt<1>, doReadWire : UInt<1>}}
    
    smem theSRAM : UInt<4>[486] @[GLBCluster.scala 55:57]
    wire writeOrRead : UInt<1> @[GLBCluster.scala 57:41]
    wire doEnWire : UInt<1> @[GLBCluster.scala 60:38]
    wire doReadWire : UInt<1> @[GLBCluster.scala 61:40]
    wire doWriteWire : UInt<1> @[GLBCluster.scala 62:41]
    wire writeInData : UInt<4> @[GLBCluster.scala 63:41]
    wire readOutData : UInt<4> @[GLBCluster.scala 64:41]
    reg waitForRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[GLBCluster.scala 67:44]
    wire doIdxIncWire : UInt<1> @[GLBCluster.scala 68:42]
    wire nextValid : UInt<1> @[GLBCluster.scala 69:39]
    reg nextValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[GLBCluster.scala 70:45]
    reg doDoneReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[GLBCluster.scala 71:42]
    node _T = and(doReadWire, waitForRead) @[GLBCluster.scala 72:60]
    node _T_1 = mux(writeOrRead, doWriteWire, _T) @[GLBCluster.scala 72:22]
    doIdxIncWire <= _T_1 @[GLBCluster.scala 72:16]
    wire _T_2 : UInt<1> @[GLBCluster.scala 105:36]
    wire _T_3 : UInt<1> @[GLBCluster.scala 106:41]
    wire _T_4 : UInt<1> @[GLBCluster.scala 107:35]
    wire _T_5 : UInt<1> @[GLBCluster.scala 108:34]
    reg _T_6 : UInt<9>, clock with : (reset => (reset, UInt<9>("h00"))) @[GLBCluster.scala 109:39]
    wire _T_7 : UInt<4> @[GLBCluster.scala 113:33]
    wire _T_8 : UInt<1> @[GLBCluster.scala 114:32]
    wire _T_9 : UInt<1> @[GLBCluster.scala 116:38]
    wire _T_10 : UInt<1> @[GLBCluster.scala 117:29]
    writeOrRead <= io.ctrlPath.writeOrRead @[GLBCluster.scala 119:15]
    io.ctrlPath.done <= _T_8 @[GLBCluster.scala 120:20]
    node _T_11 = eq(writeOrRead, UInt<1>("h00")) @[GLBCluster.scala 121:16]
    node _T_12 = eq(doDoneReg, UInt<1>("h00")) @[GLBCluster.scala 121:32]
    node _T_13 = or(_T_11, _T_12) @[GLBCluster.scala 121:29]
    node _T_14 = and(_T_13, io.ctrlPath.doEn) @[GLBCluster.scala 121:44]
    doEnWire <= _T_14 @[GLBCluster.scala 121:12]
    node _T_15 = mux(writeOrRead, writeInData, readOutData) @[GLBCluster.scala 122:21]
    _T_7 <= _T_15 @[GLBCluster.scala 122:15]
    when doIdxIncWire : @[GLBCluster.scala 124:23]
      node _T_16 = add(_T_6, UInt<1>("h01")) @[GLBCluster.scala 125:26]
      node _T_17 = tail(_T_16, 1) @[GLBCluster.scala 125:26]
      _T_6 <= _T_17 @[GLBCluster.scala 125:14]
      skip @[GLBCluster.scala 124:23]
    when _T_10 : @[GLBCluster.scala 127:18]
      _T_6 <= UInt<1>("h00") @[GLBCluster.scala 128:14]
      skip @[GLBCluster.scala 127:18]
    writeInData <= io.dataPath.inIOs.data.bits @[GLBCluster.scala 87:17]
    node _T_18 = and(doEnWire, io.dataPath.inIOs.data.valid) @[GLBCluster.scala 88:29]
    doWriteWire <= _T_18 @[GLBCluster.scala 88:17]
    io.dataPath.inIOs.data.ready <= doWriteWire @[GLBCluster.scala 89:21]
    when doIdxIncWire : @[GLBCluster.scala 90:24]
      write mport _T_19 = theSRAM[_T_6], clock
      _T_19 <= writeInData
      skip @[GLBCluster.scala 90:24]
    node _T_20 = eq(waitForRead, UInt<1>("h00")) @[GLBCluster.scala 75:56]
    node _T_21 = and(doEnWire, _T_20) @[GLBCluster.scala 75:53]
    node _T_22 = mux(writeOrRead, UInt<1>("h00"), _T_21) @[GLBCluster.scala 75:21]
    nextValid <= _T_22 @[GLBCluster.scala 75:15]
    node _T_23 = and(nextValid, io.dataPath.outIOs.data.ready) @[GLBCluster.scala 76:31]
    nextValidReg <= _T_23 @[GLBCluster.scala 76:18]
    node _T_24 = eq(_T_8, UInt<1>("h00")) @[GLBCluster.scala 79:24]
    node _T_25 = eq(doEnWire, UInt<1>("h00")) @[GLBCluster.scala 79:56]
    node _T_26 = or(writeOrRead, _T_25) @[GLBCluster.scala 79:53]
    node _T_27 = eq(waitForRead, UInt<1>("h00")) @[GLBCluster.scala 79:80]
    node _T_28 = mux(_T_26, waitForRead, _T_27) @[GLBCluster.scala 79:40]
    node _T_29 = mux(_T_24, _T_28, UInt<1>("h00")) @[GLBCluster.scala 79:23]
    waitForRead <= _T_29 @[GLBCluster.scala 79:17]
    io.dataPath.outIOs.data.valid <= nextValidReg @[GLBCluster.scala 80:21]
    node _T_30 = and(io.dataPath.outIOs.data.ready, nextValidReg) @[GLBCluster.scala 81:35]
    doReadWire <= _T_30 @[GLBCluster.scala 81:16]
    node _T_31 = eq(waitForRead, UInt<1>("h00")) @[GLBCluster.scala 82:54]
    node _T_32 = and(doReadWire, _T_31) @[GLBCluster.scala 82:51]
    wire _T_33 : UInt @[GLBCluster.scala 82:32]
    _T_33 is invalid @[GLBCluster.scala 82:32]
    when _T_32 : @[GLBCluster.scala 82:32]
      _T_33 <= _T_6 @[GLBCluster.scala 82:32]
      node _T_34 = or(_T_33, UInt<9>("h00")) @[GLBCluster.scala 82:32]
      node _T_35 = bits(_T_34, 8, 0) @[GLBCluster.scala 82:32]
      read mport _T_36 = theSRAM[_T_35], clock @[GLBCluster.scala 82:32]
      skip @[GLBCluster.scala 82:32]
    readOutData <= _T_36 @[GLBCluster.scala 82:17]
    node _T_37 = mux(waitForRead, readOutData, UInt<1>("h00")) @[GLBCluster.scala 83:26]
    io.dataPath.outIOs.data.bits <= _T_37 @[GLBCluster.scala 83:20]
    reg _T_38 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[GLBCluster.scala 136:34]
    wire _T_39 : UInt<1> @[GLBCluster.scala 137:34]
    node _T_40 = eq(_T_7, UInt<1>("h00")) @[GLBCluster.scala 138:31]
    _T_39 <= _T_40 @[GLBCluster.scala 138:16]
    node _T_41 = and(_T_39, waitForRead) @[GLBCluster.scala 139:65]
    node _T_42 = mux(writeOrRead, _T_39, _T_41) @[GLBCluster.scala 139:24]
    _T_2 <= _T_42 @[GLBCluster.scala 139:18]
    node _T_43 = and(_T_2, doEnWire) @[GLBCluster.scala 140:41]
    _T_3 <= _T_43 @[GLBCluster.scala 140:23]
    node _T_44 = eq(UInt<2>("h00"), _T_38) @[Conditional.scala 37:30]
    when _T_44 : @[Conditional.scala 40:58]
      doDoneReg <= UInt<1>("h00") @[GLBCluster.scala 143:17]
      when _T_3 : @[GLBCluster.scala 144:34]
        _T_38 <= UInt<2>("h01") @[GLBCluster.scala 145:19]
        skip @[GLBCluster.scala 144:34]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_45 = eq(UInt<2>("h01"), _T_38) @[Conditional.scala 37:30]
      when _T_45 : @[Conditional.scala 39:67]
        when _T_3 : @[GLBCluster.scala 149:34]
          _T_38 <= UInt<2>("h02") @[GLBCluster.scala 150:19]
          skip @[GLBCluster.scala 149:34]
        else : @[GLBCluster.scala 151:20]
          _T_38 <= UInt<2>("h00") @[GLBCluster.scala 152:19]
          skip @[GLBCluster.scala 151:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_46 = eq(UInt<2>("h02"), _T_38) @[Conditional.scala 37:30]
        when _T_46 : @[Conditional.scala 39:67]
          _T_38 <= UInt<2>("h00") @[GLBCluster.scala 156:17]
          skip @[Conditional.scala 39:67]
    node _T_47 = eq(_T_38, UInt<2>("h02")) @[GLBCluster.scala 159:33]
    _T_9 <= _T_47 @[GLBCluster.scala 159:20]
    node _T_48 = eq(_T_38, UInt<2>("h01")) @[GLBCluster.scala 160:29]
    _T_5 <= _T_48 @[GLBCluster.scala 160:16]
    _T_4 <= _T_9 @[GLBCluster.scala 161:17]
    node _T_49 = mux(writeOrRead, _T_4, _T_5) @[GLBCluster.scala 162:20]
    _T_8 <= _T_49 @[GLBCluster.scala 162:14]
    doDoneReg <= _T_8 @[GLBCluster.scala 163:13]
    _T_10 <= _T_9 @[GLBCluster.scala 164:11]
    io.debugIO.idx <= _T_6 @[GLBCluster.scala 96:17]
    io.debugIO.idxInc <= doIdxIncWire @[GLBCluster.scala 97:20]
    io.debugIO.waitForRead <= waitForRead @[GLBCluster.scala 98:25]
    io.debugIO.doReadWire <= doReadWire @[GLBCluster.scala 99:24]
    io.debugIO.currentData <= _T_7 @[GLBCluster.scala 168:28]
    io.debugIO.meetOneZero <= _T_5 @[GLBCluster.scala 169:28]
    io.debugIO.theState <= _T_38 @[GLBCluster.scala 170:25]
    io.debugIO.idxCount is invalid @[GLBCluster.scala 171:25]
    
