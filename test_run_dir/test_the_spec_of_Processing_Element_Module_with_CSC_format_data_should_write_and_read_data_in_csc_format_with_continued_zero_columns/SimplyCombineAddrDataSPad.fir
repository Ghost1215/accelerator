;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit SimplyCombineAddrDataSPad : 
  module SPadAddrModule : 
    input clock : Clock
    input reset : Reset
    output io : {dataPath : {columnNum : UInt<4>, readOutData : UInt<4>, flip writeInData : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}}}, ctrlPath : {flip writeEn : UInt<1>, writeIdx : UInt<4>, writeFin : UInt<1>, flip readEn : UInt<1>, flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    wire dataWire : UInt<4> @[SPadModule.scala 75:38]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 76:49]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 77:48]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 78:43]
    wire readWrapWire : UInt<1> @[SPadModule.scala 79:42]
    wire readIndexInc : UInt<1> @[SPadModule.scala 80:42]
    node _T = eq(io.dataPath.writeInData.data.bits, UInt<1>("h00")) @[SPadModule.scala 81:41]
    node _T_1 = and(_T, io.ctrlPath.writeEn) @[SPadModule.scala 81:49]
    writeWrapWire <= _T_1 @[SPadModule.scala 81:17]
    node _T_2 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 82:28]
    node _T_3 = and(_T_2, readIndexInc) @[SPadModule.scala 82:36]
    readWrapWire <= _T_3 @[SPadModule.scala 82:16]
    node _T_4 = and(io.dataPath.writeInData.data.valid, io.ctrlPath.writeEn) @[SPadModule.scala 84:31]
    when _T_4 : @[SPadModule.scala 84:55]
      io.dataPath.writeInData.data.ready <= UInt<1>("h01") @[SPadModule.scala 85:27]
      node _T_5 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 86:42]
      node _T_6 = tail(_T_5, 1) @[SPadModule.scala 86:42]
      padWriteIndexReg <= _T_6 @[SPadModule.scala 86:22]
      when writeWrapWire : @[SPadModule.scala 87:26]
        padWriteIndexReg <= UInt<1>("h00") @[SPadModule.scala 88:24]
        skip @[SPadModule.scala 87:26]
      skip @[SPadModule.scala 84:55]
    else : @[SPadModule.scala 90:15]
      io.dataPath.writeInData.data.ready <= UInt<1>("h00") @[SPadModule.scala 91:27]
      skip @[SPadModule.scala 90:15]
    io.ctrlPath.writeIdx <= padWriteIndexReg @[SPadModule.scala 94:24]
    io.ctrlPath.writeFin <= writeWrapWire @[SPadModule.scala 95:24]
    io.dataPath.columnNum <= padReadIndexReg @[SPadModule.scala 96:25]
    wire _T_7 : UInt<4>[9] @[SPadModule.scala 14:52]
    _T_7[0] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    _T_7[1] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    _T_7[2] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    _T_7[3] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    _T_7[4] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    _T_7[5] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    _T_7[6] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    _T_7[7] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    _T_7[8] <= UInt<4>("h00") @[SPadModule.scala 14:52]
    reg _T_8 : UInt<4>[9], clock with : (reset => (reset, _T_7)) @[SPadModule.scala 14:44]
    node _T_9 = and(io.dataPath.writeInData.data.valid, io.ctrlPath.writeEn) @[SPadModule.scala 16:31]
    when _T_9 : @[SPadModule.scala 16:55]
      _T_8[padWriteIndexReg] <= io.dataPath.writeInData.data.bits @[SPadModule.scala 17:32]
      skip @[SPadModule.scala 16:55]
    when readIndexInc : @[SPadModule.scala 20:23]
      node _T_10 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 21:40]
      node _T_11 = tail(_T_10, 1) @[SPadModule.scala 21:40]
      padReadIndexReg <= _T_11 @[SPadModule.scala 21:21]
      when readWrapWire : @[SPadModule.scala 22:25]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 23:23]
        skip @[SPadModule.scala 22:25]
      skip @[SPadModule.scala 20:23]
    dataWire <= _T_8[padReadIndexReg] @[SPadModule.scala 27:12]
    io.dataPath.readOutData <= dataWire @[SPadModule.scala 28:27]
    readIndexInc <= io.ctrlPath.indexInc @[SPadModule.scala 29:16]
    
  module SPadDataModule : 
    input clock : Clock
    input reset : Reset
    output io : {dataPath : {columnNum : UInt<4>, readOutData : UInt<12>, flip writeInData : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}}}, ctrlPath : {flip writeEn : UInt<1>, writeIdx : UInt<4>, writeFin : UInt<1>, flip readEn : UInt<1>, flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    wire dataWire : UInt<12> @[SPadModule.scala 75:38]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 76:49]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 77:48]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 78:43]
    wire readWrapWire : UInt<1> @[SPadModule.scala 79:42]
    wire readIndexInc : UInt<1> @[SPadModule.scala 80:42]
    node _T = eq(io.dataPath.writeInData.data.bits, UInt<1>("h00")) @[SPadModule.scala 81:41]
    node _T_1 = and(_T, io.ctrlPath.writeEn) @[SPadModule.scala 81:49]
    writeWrapWire <= _T_1 @[SPadModule.scala 81:17]
    node _T_2 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 82:28]
    node _T_3 = and(_T_2, readIndexInc) @[SPadModule.scala 82:36]
    readWrapWire <= _T_3 @[SPadModule.scala 82:16]
    node _T_4 = and(io.dataPath.writeInData.data.valid, io.ctrlPath.writeEn) @[SPadModule.scala 84:31]
    when _T_4 : @[SPadModule.scala 84:55]
      io.dataPath.writeInData.data.ready <= UInt<1>("h01") @[SPadModule.scala 85:27]
      node _T_5 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 86:42]
      node _T_6 = tail(_T_5, 1) @[SPadModule.scala 86:42]
      padWriteIndexReg <= _T_6 @[SPadModule.scala 86:22]
      when writeWrapWire : @[SPadModule.scala 87:26]
        padWriteIndexReg <= UInt<1>("h00") @[SPadModule.scala 88:24]
        skip @[SPadModule.scala 87:26]
      skip @[SPadModule.scala 84:55]
    else : @[SPadModule.scala 90:15]
      io.dataPath.writeInData.data.ready <= UInt<1>("h00") @[SPadModule.scala 91:27]
      skip @[SPadModule.scala 90:15]
    io.ctrlPath.writeIdx <= padWriteIndexReg @[SPadModule.scala 94:24]
    io.ctrlPath.writeFin <= writeWrapWire @[SPadModule.scala 95:24]
    io.dataPath.columnNum <= padReadIndexReg @[SPadModule.scala 96:25]
    wire _T_7 : UInt<12>[16] @[SPadModule.scala 54:46]
    _T_7[0] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[1] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[2] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[3] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[4] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[5] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[6] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[7] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[8] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[9] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[10] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[11] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[12] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[13] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[14] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    _T_7[15] <= UInt<12>("h00") @[SPadModule.scala 54:46]
    reg _T_8 : UInt<12>[16], clock with : (reset => (reset, _T_7)) @[SPadModule.scala 54:38]
    node _T_9 = and(io.dataPath.writeInData.data.valid, io.ctrlPath.writeEn) @[SPadModule.scala 55:33]
    when _T_9 : @[SPadModule.scala 55:57]
      _T_8[padWriteIndexReg] <= io.dataPath.writeInData.data.bits @[SPadModule.scala 56:34]
      skip @[SPadModule.scala 55:57]
    when readIndexInc : @[SPadModule.scala 59:25]
      node _T_10 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 60:42]
      node _T_11 = tail(_T_10, 1) @[SPadModule.scala 60:42]
      padReadIndexReg <= _T_11 @[SPadModule.scala 60:23]
      when readWrapWire : @[SPadModule.scala 61:27]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 62:25]
        skip @[SPadModule.scala 61:27]
      skip @[SPadModule.scala 59:25]
    dataWire <= _T_8[padReadIndexReg] @[SPadModule.scala 66:14]
    readIndexInc <= io.ctrlPath.indexInc @[SPadModule.scala 68:16]
    io.dataPath.readOutData <= dataWire @[SPadModule.scala 69:27]
    
  module SimplyCombineAddrDataSPad : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip iactIOs : {addrIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}}, dataIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}}}, iactWF : {addrWriteFin : UInt<1>, dataWriteFin : UInt<1>}, iactAddrWriteIdx : UInt<4>, flip iactDataReq : UInt<1>, iactMatrixColumn : UInt<4>, iactMatrixRow : UInt<4>, iactMatrixData : UInt<8>, iactMatrixDataBin : UInt<12>, iactAddrReadEn : UInt<1>, iactAddrReadData : UInt<4>, iactDataReadIndex : UInt<4>, iactDataWriteIdx : UInt<4>, flip writeEn : UInt<1>}
    
    inst SPadAddrModule of SPadAddrModule @[SimplyCombineAddrDataSPad.scala 9:52]
    SPadAddrModule.clock <= clock
    SPadAddrModule.reset <= reset
    inst SPadDataModule of SPadDataModule @[SimplyCombineAddrDataSPad.scala 10:52]
    SPadDataModule.clock <= clock
    SPadDataModule.reset <= reset
    reg _T : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[SimplyCombineAddrDataSPad.scala 12:35]
    wire _T_1 : UInt<4> @[SimplyCombineAddrDataSPad.scala 13:45]
    wire _T_2 : UInt<4> @[SimplyCombineAddrDataSPad.scala 14:44]
    wire _T_3 : UInt<4> @[SimplyCombineAddrDataSPad.scala 15:45]
    reg _T_4 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SimplyCombineAddrDataSPad.scala 16:52]
    reg _T_5 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SimplyCombineAddrDataSPad.scala 17:52]
    reg _T_6 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SimplyCombineAddrDataSPad.scala 18:52]
    wire _T_7 : UInt<1> @[SimplyCombineAddrDataSPad.scala 19:50]
    wire _T_8 : UInt<1> @[SimplyCombineAddrDataSPad.scala 20:50]
    reg _T_9 : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SimplyCombineAddrDataSPad.scala 21:50]
    reg _T_10 : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SimplyCombineAddrDataSPad.scala 22:51]
    reg _T_11 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[SimplyCombineAddrDataSPad.scala 23:55]
    node _T_12 = eq(_T, UInt<2>("h02")) @[SimplyCombineAddrDataSPad.scala 24:36]
    node _T_13 = add(_T_3, UInt<1>("h01")) @[SimplyCombineAddrDataSPad.scala 24:97]
    node _T_14 = tail(_T_13, 1) @[SimplyCombineAddrDataSPad.scala 24:97]
    node _T_15 = eq(_T_2, _T_14) @[SimplyCombineAddrDataSPad.scala 24:74]
    node _T_16 = and(_T_12, _T_15) @[SimplyCombineAddrDataSPad.scala 24:53]
    node _T_17 = eq(_T, UInt<2>("h01")) @[SimplyCombineAddrDataSPad.scala 24:116]
    node _T_18 = eq(_T_2, UInt<4>("h0f")) @[SimplyCombineAddrDataSPad.scala 24:154]
    node _T_19 = and(_T_17, _T_18) @[SimplyCombineAddrDataSPad.scala 24:133]
    node _T_20 = or(_T_16, _T_19) @[SimplyCombineAddrDataSPad.scala 24:106]
    _T_7 <= _T_20 @[SimplyCombineAddrDataSPad.scala 24:26]
    node _T_21 = eq(_T, UInt<2>("h01")) @[SimplyCombineAddrDataSPad.scala 25:36]
    node _T_22 = eq(_T_4, UInt<1>("h00")) @[SimplyCombineAddrDataSPad.scala 25:56]
    node _T_23 = and(_T_21, _T_22) @[SimplyCombineAddrDataSPad.scala 25:53]
    node _T_24 = eq(_T_11, UInt<1>("h00")) @[SimplyCombineAddrDataSPad.scala 25:82]
    node _T_25 = and(_T_23, _T_24) @[SimplyCombineAddrDataSPad.scala 25:79]
    node _T_26 = eq(_T, UInt<2>("h02")) @[SimplyCombineAddrDataSPad.scala 25:119]
    node _T_27 = eq(_T_7, UInt<1>("h00")) @[SimplyCombineAddrDataSPad.scala 25:139]
    node _T_28 = and(_T_26, _T_27) @[SimplyCombineAddrDataSPad.scala 25:136]
    node _T_29 = or(_T_25, _T_28) @[SimplyCombineAddrDataSPad.scala 25:109]
    _T_8 <= _T_29 @[SimplyCombineAddrDataSPad.scala 25:26]
    SPadAddrModule.io.dataPath.writeInData.data.bits <= io.iactIOs.addrIOs.data.bits @[SimplyCombineAddrDataSPad.scala 27:40]
    SPadAddrModule.io.dataPath.writeInData.data.valid <= io.iactIOs.addrIOs.data.valid @[SimplyCombineAddrDataSPad.scala 27:40]
    io.iactIOs.addrIOs.data.ready <= SPadAddrModule.io.dataPath.writeInData.data.ready @[SimplyCombineAddrDataSPad.scala 27:40]
    _T_1 <= SPadAddrModule.io.dataPath.columnNum @[SimplyCombineAddrDataSPad.scala 28:21]
    io.iactMatrixColumn <= _T_9 @[SimplyCombineAddrDataSPad.scala 29:23]
    _T_2 <= SPadAddrModule.io.dataPath.readOutData @[SimplyCombineAddrDataSPad.scala 30:20]
    io.iactAddrReadData <= _T_2 @[SimplyCombineAddrDataSPad.scala 31:23]
    io.iactAddrReadEn <= _T_5 @[SimplyCombineAddrDataSPad.scala 32:21]
    SPadAddrModule.io.ctrlPath.writeEn <= io.writeEn @[SimplyCombineAddrDataSPad.scala 33:36]
    io.iactAddrWriteIdx <= SPadAddrModule.io.ctrlPath.writeIdx @[SimplyCombineAddrDataSPad.scala 34:23]
    io.iactWF.addrWriteFin <= SPadAddrModule.io.ctrlPath.writeFin @[SimplyCombineAddrDataSPad.scala 35:26]
    SPadAddrModule.io.ctrlPath.readEn <= _T_5 @[SimplyCombineAddrDataSPad.scala 36:35]
    SPadAddrModule.io.ctrlPath.readInIdx is invalid @[SimplyCombineAddrDataSPad.scala 37:38]
    SPadAddrModule.io.ctrlPath.indexInc <= _T_7 @[SimplyCombineAddrDataSPad.scala 38:37]
    SPadAddrModule.io.ctrlPath.readInIdxEn is invalid @[SimplyCombineAddrDataSPad.scala 39:40]
    SPadDataModule.io.dataPath.writeInData.data.bits <= io.iactIOs.dataIOs.data.bits @[SimplyCombineAddrDataSPad.scala 41:40]
    SPadDataModule.io.dataPath.writeInData.data.valid <= io.iactIOs.dataIOs.data.valid @[SimplyCombineAddrDataSPad.scala 41:40]
    io.iactIOs.dataIOs.data.ready <= SPadDataModule.io.dataPath.writeInData.data.ready @[SimplyCombineAddrDataSPad.scala 41:40]
    _T_3 <= SPadDataModule.io.dataPath.columnNum @[SimplyCombineAddrDataSPad.scala 42:21]
    io.iactDataReadIndex <= _T_3 @[SimplyCombineAddrDataSPad.scala 43:24]
    io.iactMatrixDataBin <= SPadDataModule.io.dataPath.readOutData @[SimplyCombineAddrDataSPad.scala 44:24]
    node _T_30 = bits(SPadDataModule.io.dataPath.readOutData, 0, 0) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_31 = bits(SPadDataModule.io.dataPath.readOutData, 1, 1) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_32 = bits(SPadDataModule.io.dataPath.readOutData, 2, 2) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_33 = bits(SPadDataModule.io.dataPath.readOutData, 3, 3) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_34 = bits(SPadDataModule.io.dataPath.readOutData, 4, 4) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_35 = bits(SPadDataModule.io.dataPath.readOutData, 5, 5) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_36 = bits(SPadDataModule.io.dataPath.readOutData, 6, 6) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_37 = bits(SPadDataModule.io.dataPath.readOutData, 7, 7) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_38 = bits(SPadDataModule.io.dataPath.readOutData, 8, 8) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_39 = bits(SPadDataModule.io.dataPath.readOutData, 9, 9) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_40 = bits(SPadDataModule.io.dataPath.readOutData, 10, 10) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_41 = bits(SPadDataModule.io.dataPath.readOutData, 11, 11) @[SimplyCombineAddrDataSPad.scala 45:82]
    node _T_42 = cat(_T_35, _T_34) @[Cat.scala 29:58]
    node _T_43 = cat(_T_37, _T_36) @[Cat.scala 29:58]
    node _T_44 = cat(_T_43, _T_42) @[Cat.scala 29:58]
    node _T_45 = cat(_T_39, _T_38) @[Cat.scala 29:58]
    node _T_46 = cat(_T_41, _T_40) @[Cat.scala 29:58]
    node _T_47 = cat(_T_46, _T_45) @[Cat.scala 29:58]
    node _T_48 = cat(_T_47, _T_44) @[Cat.scala 29:58]
    io.iactMatrixData <= _T_48 @[SimplyCombineAddrDataSPad.scala 46:21]
    node _T_49 = cat(_T_31, _T_30) @[Cat.scala 29:58]
    node _T_50 = cat(_T_33, _T_32) @[Cat.scala 29:58]
    node _T_51 = cat(_T_50, _T_49) @[Cat.scala 29:58]
    io.iactMatrixRow <= _T_51 @[SimplyCombineAddrDataSPad.scala 47:20]
    SPadDataModule.io.ctrlPath.writeEn <= io.writeEn @[SimplyCombineAddrDataSPad.scala 48:36]
    io.iactDataWriteIdx <= SPadDataModule.io.ctrlPath.writeIdx @[SimplyCombineAddrDataSPad.scala 49:23]
    io.iactWF.dataWriteFin <= SPadDataModule.io.ctrlPath.writeFin @[SimplyCombineAddrDataSPad.scala 50:26]
    SPadDataModule.io.ctrlPath.readEn <= _T_6 @[SimplyCombineAddrDataSPad.scala 51:35]
    SPadDataModule.io.ctrlPath.readInIdx is invalid @[SimplyCombineAddrDataSPad.scala 52:38]
    SPadDataModule.io.ctrlPath.indexInc <= _T_8 @[SimplyCombineAddrDataSPad.scala 53:37]
    SPadDataModule.io.ctrlPath.readInIdxEn is invalid @[SimplyCombineAddrDataSPad.scala 54:40]
    node _T_52 = eq(UInt<2>("h00"), _T) @[Conditional.scala 37:30]
    when _T_52 : @[Conditional.scala 40:58]
      when io.iactDataReq : @[SimplyCombineAddrDataSPad.scala 60:28]
        _T <= UInt<2>("h01") @[SimplyCombineAddrDataSPad.scala 61:14]
        _T_5 <= UInt<1>("h01") @[SimplyCombineAddrDataSPad.scala 62:31]
        _T_6 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 63:31]
        _T_11 <= UInt<1>("h01") @[SimplyCombineAddrDataSPad.scala 64:34]
        skip @[SimplyCombineAddrDataSPad.scala 60:28]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_53 = eq(UInt<2>("h01"), _T) @[Conditional.scala 37:30]
      when _T_53 : @[Conditional.scala 39:67]
        node _T_54 = eq(_T_2, UInt<4>("h0f")) @[SimplyCombineAddrDataSPad.scala 69:30]
        when _T_54 : @[SimplyCombineAddrDataSPad.scala 69:56]
          _T <= UInt<2>("h01") @[SimplyCombineAddrDataSPad.scala 70:14]
          _T_4 <= UInt<1>("h01") @[SimplyCombineAddrDataSPad.scala 71:31]
          _T_5 <= UInt<1>("h01") @[SimplyCombineAddrDataSPad.scala 72:31]
          _T_6 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 73:31]
          node _T_55 = add(_T_10, UInt<1>("h01")) @[SimplyCombineAddrDataSPad.scala 74:54]
          node _T_56 = tail(_T_55, 1) @[SimplyCombineAddrDataSPad.scala 74:54]
          _T_10 <= _T_56 @[SimplyCombineAddrDataSPad.scala 74:30]
          skip @[SimplyCombineAddrDataSPad.scala 69:56]
        else : @[SimplyCombineAddrDataSPad.scala 75:19]
          _T <= UInt<2>("h02") @[SimplyCombineAddrDataSPad.scala 76:14]
          _T_5 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 77:31]
          _T_6 <= UInt<1>("h01") @[SimplyCombineAddrDataSPad.scala 78:31]
          skip @[SimplyCombineAddrDataSPad.scala 75:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_57 = eq(UInt<2>("h02"), _T) @[Conditional.scala 37:30]
        when _T_57 : @[Conditional.scala 39:67]
          _T_11 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 82:32]
          node _T_58 = eq(io.iactMatrixData, UInt<1>("h00")) @[SimplyCombineAddrDataSPad.scala 83:31]
          when _T_58 : @[SimplyCombineAddrDataSPad.scala 83:40]
            _T <= UInt<2>("h00") @[SimplyCombineAddrDataSPad.scala 84:14]
            _T_6 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 85:31]
            _T_4 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 86:31]
            skip @[SimplyCombineAddrDataSPad.scala 83:40]
          when _T_7 : @[SimplyCombineAddrDataSPad.scala 88:37]
            _T <= UInt<2>("h01") @[SimplyCombineAddrDataSPad.scala 89:14]
            _T_4 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 90:31]
            _T_5 <= UInt<1>("h01") @[SimplyCombineAddrDataSPad.scala 92:31]
            _T_6 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 93:31]
            when _T_4 : @[SimplyCombineAddrDataSPad.scala 94:38]
              node _T_59 = add(_T_9, UInt<1>("h01")) @[SimplyCombineAddrDataSPad.scala 95:54]
              node _T_60 = tail(_T_59, 1) @[SimplyCombineAddrDataSPad.scala 95:54]
              node _T_61 = add(_T_60, _T_10) @[SimplyCombineAddrDataSPad.scala 95:60]
              node _T_62 = tail(_T_61, 1) @[SimplyCombineAddrDataSPad.scala 95:60]
              _T_9 <= _T_62 @[SimplyCombineAddrDataSPad.scala 95:31]
              _T_10 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 97:32]
              skip @[SimplyCombineAddrDataSPad.scala 94:38]
            else : @[SimplyCombineAddrDataSPad.scala 98:22]
              node _T_63 = add(_T_9, UInt<1>("h01")) @[SimplyCombineAddrDataSPad.scala 99:54]
              node _T_64 = tail(_T_63, 1) @[SimplyCombineAddrDataSPad.scala 99:54]
              _T_9 <= _T_64 @[SimplyCombineAddrDataSPad.scala 99:31]
              skip @[SimplyCombineAddrDataSPad.scala 98:22]
            skip @[SimplyCombineAddrDataSPad.scala 88:37]
          else : @[SimplyCombineAddrDataSPad.scala 101:20]
            _T <= UInt<2>("h02") @[SimplyCombineAddrDataSPad.scala 102:14]
            _T_5 <= UInt<1>("h00") @[SimplyCombineAddrDataSPad.scala 103:31]
            _T_6 <= UInt<1>("h01") @[SimplyCombineAddrDataSPad.scala 104:31]
            skip @[SimplyCombineAddrDataSPad.scala 101:20]
          skip @[Conditional.scala 39:67]
    
